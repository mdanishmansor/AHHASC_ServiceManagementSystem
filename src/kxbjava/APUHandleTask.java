/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kxbjava;

import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Scanner;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author User
 */
public class APUHandleTask extends javax.swing.JFrame {
    
    private final String apptPrefix = "APPT";
    private final String feedPrefix = "FEED";
    private String FileDir, techID, ApptID, feedID;
    private int newFeedID;
    private DefaultComboBoxModel ApptList;
    private final String source = System.getProperty("user.dir") + "\\src\\TextFiles\\Feedback.txt";
    /**
     * Creates new form APUHandleTask
     */
    public APUHandleTask() {
        initComponents();
        initForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblPageTitle = new javax.swing.JLabel();
        cmbApptID = new javax.swing.JComboBox<>();
        txtApptDate = new javax.swing.JTextField();
        lblApptDate = new javax.swing.JLabel();
        txtCustomerName = new javax.swing.JTextField();
        txtAppliance = new javax.swing.JTextField();
        txtApptTime = new javax.swing.JTextField();
        txttotalPayment = new javax.swing.JTextField();
        txtPaymentDate = new javax.swing.JTextField();
        cmbPaymentStatus = new javax.swing.JComboBox<>();
        btnUpdate = new javax.swing.JButton();
        txtTechID = new javax.swing.JTextField();
        txtPaymentAmount = new javax.swing.JTextField();

        lblTitle.setBackground(new java.awt.Color(68, 68, 68));
        lblTitle.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(218, 0, 55));
        lblTitle.setText("User Profile");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(68, 68, 68));

        lblPageTitle.setBackground(new java.awt.Color(68, 68, 68));
        lblPageTitle.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        lblPageTitle.setForeground(new java.awt.Color(218, 0, 55));
        lblPageTitle.setText("Handle Task");

        cmbApptID.setBackground(new java.awt.Color(68, 68, 68));
        cmbApptID.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        cmbApptID.setForeground(new java.awt.Color(237, 237, 237));
        cmbApptID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Appointment ID" }));
        cmbApptID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbApptIDActionPerformed(evt);
            }
        });

        txtApptDate.setEditable(false);
        txtApptDate.setBackground(new java.awt.Color(68, 68, 68));
        txtApptDate.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtApptDate.setForeground(new java.awt.Color(237, 237, 237));
        txtApptDate.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));

        lblApptDate.setText("Appointment Date:");

        txtCustomerName.setEditable(false);
        txtCustomerName.setBackground(new java.awt.Color(68, 68, 68));
        txtCustomerName.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtCustomerName.setForeground(new java.awt.Color(237, 237, 237));
        txtCustomerName.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));

        txtAppliance.setEditable(false);
        txtAppliance.setBackground(new java.awt.Color(68, 68, 68));
        txtAppliance.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtAppliance.setForeground(new java.awt.Color(237, 237, 237));
        txtAppliance.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));

        txtApptTime.setEditable(false);
        txtApptTime.setBackground(new java.awt.Color(68, 68, 68));
        txtApptTime.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtApptTime.setForeground(new java.awt.Color(237, 237, 237));
        txtApptTime.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));

        txttotalPayment.setBackground(new java.awt.Color(68, 68, 68));
        txttotalPayment.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txttotalPayment.setForeground(new java.awt.Color(237, 237, 237));
        txttotalPayment.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));
        txttotalPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txttotalPaymentActionPerformed(evt);
            }
        });

        txtPaymentDate.setEditable(false);
        txtPaymentDate.setBackground(new java.awt.Color(68, 68, 68));
        txtPaymentDate.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtPaymentDate.setForeground(new java.awt.Color(237, 237, 237));
        txtPaymentDate.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));

        cmbPaymentStatus.setBackground(new java.awt.Color(68, 68, 68));
        cmbPaymentStatus.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        cmbPaymentStatus.setForeground(new java.awt.Color(237, 237, 237));
        cmbPaymentStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Payment Status", "Unpaid", "Paid" }));
        cmbPaymentStatus.setToolTipText("Payment Status of the Task");

        btnUpdate.setBackground(new java.awt.Color(23, 23, 23));
        btnUpdate.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(237, 237, 237));
        btnUpdate.setText("Update");
        btnUpdate.setBorder(null);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        txtTechID.setEditable(false);
        txtTechID.setBackground(new java.awt.Color(68, 68, 68));
        txtTechID.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtTechID.setForeground(new java.awt.Color(237, 237, 237));
        txtTechID.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));
        txtTechID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTechIDActionPerformed(evt);
            }
        });

        txtPaymentAmount.setBackground(new java.awt.Color(68, 68, 68));
        txtPaymentAmount.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtPaymentAmount.setForeground(new java.awt.Color(237, 237, 237));
        txtPaymentAmount.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));
        txtPaymentAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPaymentAmountActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(552, 552, 552)
                        .addComponent(lblPageTitle))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(226, 226, 226)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cmbPaymentStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtTechID, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txttotalPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtPaymentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtApptTime, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtPaymentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtAppliance, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(cmbApptID, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 127, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblApptDate)
                                    .addComponent(txtApptDate, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(528, 528, 528)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(439, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(lblPageTitle)
                .addGap(34, 34, 34)
                .addComponent(lblApptDate)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbApptID, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtApptDate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAppliance, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtApptTime, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPaymentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(69, 69, 69)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPaymentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txttotalPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbPaymentStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTechID, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // <editor-fold defaultstate="collapsed" desc="Methods">   
    
     private void loadUserProfile(){
        String[] matchedID = null;
        FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
        File usertext = new File(FileDir + "UserCache.txt");
        Scanner intUser;
        try {
            intUser = new Scanner(usertext);
            while (intUser.hasNext())
            {
             String bEntry = intUser.nextLine();
             matchedID = bEntry.split(":");
             techID = matchedID[0];
                }
            intUser.close();
        } catch (FileNotFoundException ex) {
            //Logger.getLogger(.class.getName()).log(Level.SEVERE, null, ex);
        }
    } 
     
    private void setAppointmentID(){
        // This is to ensure the entire method have access to borrow matchedID array
        String[] matchedID = null;
        ApptList = new DefaultComboBoxModel();
//        String cLabel; // Declared to store title of the selected client type
//        switch (cspecies) {
//            case "STA":
//                cLabel = "Staff";
//                break;
//            case "STU":
//                cLabel = "Student";
//                break;
//            default:
//                cLabel = "Existing";
//        }
        // Adding default text
        ApptList.addElement("Select Appointment ID");
        cmbApptID.setModel(ApptList);
        FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
        // For debugging purpose only
        // JOptionPane.showMessageDialog(null, bID);
        File appttxt = new File(FileDir + "Payment.txt");
        
        Scanner intAppt;
        try {
            // This part loads all book information
            intAppt = new Scanner(appttxt);
            // This is to increment the discovered client assignment index
            int i = 0;
            // Read lines from the file until no more are left.
            while (intAppt.hasNext())
            {
                // Read the next line.
                String bEntry = intAppt.nextLine();
                // Split the line by using the delimiterÂ ":" (semicolon) and store into array.
                matchedID = bEntry.split(":");
//                String temptype = null;
//                if (matchedID[0].contains("STA")) {
//                    temptype = "STA";
//                } else if (matchedID[0].contains("STU")) {
//                    temptype = "STU";
//                }
                // Get the digits out
//                String preOut = matchedID[0].replace(temptype, "");
//                // JOptionPane.showMessageDialog(null, preOut);
//                // Replace the string part with empty digits, leaving only the prefix
//                String numOut = matchedID[0].replace(preOut, "");
                // JOptionPane.showMessageDialog(null, numOut)
                 if ("true".equals(matchedID[10]) && matchedID[0].contains("APPT") && matchedID[1].equals(techID)) {
                    matchedID[0] = matchedID[0].replace(apptPrefix, "");
                    ApptList.addElement(matchedID[0]);
                    i++;
                }

            }
            // OptionPane.showMessageDialog(null, i);
            intAppt.close();
            // Check if there are no clients at all for each type
            if (ApptList.getSize() == 1) {
                ApptList.removeAllElements();
                ApptList.addElement("No customer(s) available.");
            }
            // Attempt to list all fetched client ID into the list box
            cmbApptID.setModel(ApptList);
            // Select index 0 as default
            cmbApptID.setSelectedIndex(0);
        } catch (FileNotFoundException ex) {
            //Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     private void loadApptInfo(){
        // Assigning the cID to the selected index value
        ApptID = (String) cmbApptID.getSelectedItem();
        // This is to ensure the entire method have access to borrow matchedID array
        String[] matchedID = null;
        FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
        // For debugging purpose only
        // JOptionPane.showMessageDialog(null, bID);
        File appttxt = new File(FileDir + "Payment.txt");
        Scanner intAppt;
        try {
            // This part loads all book information
            intAppt = new Scanner(appttxt);
            // Read lines from the file until no more are left.
            while (intAppt.hasNext())
            {
                // Read the next line.
                String bEntry = intAppt.nextLine();
                // Split the line by using the delimiter ":" (semicolon) and store into array.
                matchedID = bEntry.split(":");
                matchedID[0] = matchedID[0].replace(apptPrefix, "");
                // JOptionPane.showMessageDialog(null, i);
                if (cmbApptID.getSelectedItem().equals(matchedID[0])) {
                    txtTechID.setText(matchedID[1]);
                    txtCustomerName.setText(matchedID[2]);
                    txtApptDate.setText(matchedID[3]);
                    txtApptTime.setText(matchedID[4]);
                    txtAppliance.setText(matchedID[5]);
                    switch (matchedID[6]) {
                        case "Unpaid":
                            cmbPaymentStatus.setSelectedIndex(1);
                            break;
                        case "Paid":
                            cmbPaymentStatus.setSelectedIndex(2);
                            break;
                        default:
                            cmbPaymentStatus.setSelectedIndex(1);
                    }
//                    txtEmail.setText(matchedID[5]);
//                    txtDOB.setText(matchedID[6]);
//                    txtManagerID.setText(matchedID[7]);
                }
            }
            intAppt.close();
        } catch (FileNotFoundException ex) {
           // Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
      private void updatePayment(){
        // TODO add your handling code here:
        try {
            // Check if textfields are empty
            //emptyFields();
            // To get directory  
            FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
            // To get the book ID
            ApptID = (String) cmbApptID.getSelectedItem();
            // To rename original book.txt to book.bak
            File paymentOri = new File(FileDir + "Payment.txt");
            File paymentBack = new File(FileDir + "PaymentBack.txt");
            // To check if clientBak.txt is present or not
            if (!paymentBack.exists()){
                paymentOri.createNewFile();
            }
            // This is for debugging only!
            // JOptionPane.showMessageDialog(null, "renamed");
            // This is to rename the existing book.txt to clientBak.txt
            paymentOri.renameTo(paymentBack);
            // This is to open, find and replace a specific book record
            // Requires temporary file to store current state
            // FileWriter to write into a new file called book.txt
            FileWriter cd = new FileWriter(FileDir + "Payment.txt"); 
            // PrintWriter to print into book.txt
            PrintWriter cdp = new PrintWriter(cd); 
            // This is to open and read clientBak.txt 
            File paymenttxt = new File(FileDir + "PaymentBack.txt");
            // This is to instantiate the file opened earlier
            Scanner inputFile = new Scanner(paymenttxt);
            // This array is to contain all lines
            String[] matchedID;
            // This is only for debugging!
            // boolean itWorked = false;
            // Read lines from the file until no more are left.
            while (inputFile.hasNext())
            {
                // This is for debugging only!
                // JOptionPane.showMessageDialog(null, "In loop");
                // Read the next line.
                String bEntry = inputFile.nextLine();
                // Split the line by using the delimiter ":" (semicolon) and store into array.
                matchedID = bEntry.split(":");
                // Check if the read line has current book ID
                if (matchedID[0].equals(apptPrefix + ApptID)) {
                    // Inserting the new information from the text fields into the book line
                    matchedID[1] = txtTechID.getText();
                    matchedID[2] = txtCustomerName.getText();
                    matchedID[3] = txtApptDate.getText();
                    matchedID[4] = txtApptTime.getText();
                    matchedID[5] = txtAppliance.getText();
                    matchedID[6] = (String) cmbPaymentStatus.getSelectedItem();
                    matchedID[7] = txtPaymentDate.getText();
                    matchedID[8] = txttotalPayment.getText();
                    matchedID[9] = txtPaymentAmount.getText();
                    matchedID[10] = "true";
                    // JOptionPane.showMessageDialog(null, "Yes it worked");
                }
                // Rewrite the new book.txt with values found in clientBak.txt
                cdp.println(matchedID[0] + ":" +
                            matchedID[1] + ":" +
                            matchedID[2] + ":" +
                            matchedID[3] + ":" +
                            matchedID[4] + ":" +
                            matchedID[5] + ":" +
                            matchedID[6] + ":" +
                            matchedID[7] + ":" +
                            matchedID[8] + ":" +
                            matchedID[9] + ":" +
                            matchedID[10]);

            }
            // Close the clientBak.txt reader
            inputFile.close();
            // This deletes clientBak.txt
            paymentBack.delete();
            // This closes the book.txt printer 
            cdp.close();
            JOptionPane.showMessageDialog(null, "Client record has been updated!", "Client updated!", JOptionPane.INFORMATION_MESSAGE);
            //loadCustomerInfo();
        } catch (Exception ex) {
            //highlightEmpty();
            JOptionPane.showMessageDialog(null, "Invalid input! Please check your input to proceed.", "Invalid insertion detected!", JOptionPane.ERROR_MESSAGE);
        }
    }
     private void feedbackIDIncrementor(){
        // This is to ensure the entire method have access to the matchedID array
        String[] matchedID = null;
        // This flag is to check if the while loop is triggered or not. Triggered while loop indicates presence of records but relevance might not
        boolean hasRecord = false;
        try {
            FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
            // For debugging purpose only
            // JOptionPane.showMessageDialog(null, bID);
            File feedbacktxt = new File(FileDir + "Feedback.txt");
            if (!feedbacktxt.exists()) {
                feedbacktxt.createNewFile();
            }
            Scanner inputFile;
            try {
                inputFile = new Scanner(feedbacktxt);
                // Read lines from the file until no more are left.
                while (inputFile.hasNext())
                {
                   // Read the next line.
                   String bEntry = inputFile.nextLine();
                   // Split the line by using the delimiterÂ ":" (semicolon) and store into array.
                   matchedID = bEntry.split(":");
                   String temptype = null;
//                   if (matchedID[0].contains("STA")) {
//                       temptype = "STA";
//                   } else if (matchedID[0].contains("STU")) {
//                       temptype = "STU";
//                   }
                   matchedID[0] = matchedID[0].replace(feedPrefix, "");
                   hasRecord = true;
                }
                inputFile.close();
                if (!hasRecord) {
                    JOptionPane.showMessageDialog(null, "No customer(s) record of any type was found! Restarting database entry.", "Customer database is empty!", JOptionPane.ERROR_MESSAGE);
                    newFeedID = 1;
                } else {
                    newFeedID = Integer.parseInt(matchedID[0]) + 1;
                }
                // JOptionPane.showMessageDialog(null, newClientID);
            } catch (FileNotFoundException ex) {
                //Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
            JOptionPane.showMessageDialog(null, "Invalid input! Customer can only consist of numbers", "Invalid input type!", JOptionPane.ERROR_MESSAGE);
        }
    }  
    private void insertFeedback(){
        // Declaring file extension used
        FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
        // Formatting ID into formal 6-digit mask
        DecimalFormat dc = new DecimalFormat("00000");
        try {
            // Fetching IDs from the textfields
            feedID = dc.format(newFeedID);
            // Check if textfields are empty
            //emptyFields();
            // Storing Borrowing entries into variables
            // Checking if gender is unselected
//            if (cmbGender.getSelectedIndex() <= 0) {
//                JOptionPane.showMessageDialog(null, "Gender is unset! Autosetting value to male", "Gender unselected!", JOptionPane.ERROR_MESSAGE);
//                cmbGender.setSelectedIndex(1); // Setting the gender to male which is index 1
//            }
            String ApptID = (String) cmbApptID.getSelectedItem();
            String TechID = txtTechID.getText();
            String paymentStatus = (String) cmbPaymentStatus.getSelectedItem();
            String apptFeedback = "customer feedback";
            String technicianRating = "0";
            //String CustGender = (String) cmbGender.getSelectedItem();
            //String CustEmail = txtEmail.getText();
           // String CustDOB = txtDOB.getText();
            // FileWriter and PrintWriter to create and write into book.txt
            try {
                // FileWriter to write into a new file called client.txt
                FileWriter cd = new FileWriter(FileDir + "Feedback.txt", true); 
                // PrintWriter to print into client.txt
                PrintWriter cdp = new PrintWriter(cd); 
                // To print the line into Borrowing textfile
                cdp.println(feedPrefix + feedID + ":" +
                            ApptID + ":" +
                            TechID + ":" +
                            paymentStatus + ":" +
                            apptFeedback + ":" + 
                            technicianRating + ":" +
                            "true"); //true boolean indicating the user is exisiting (non-deleted)
                
                cdp.close();
                cd.close();
                // To display completed borrowing process status
                JOptionPane.showMessageDialog(null, "Client is successfully added! Press OK to return to client management form.", "Adding client succeeded!", JOptionPane.INFORMATION_MESSAGE);
                // To refresh new ID 
                feedbackIDIncrementor();
                // JOptionPane.showMessageDialog(null, newClientID);
                // To reload the client information
                // Integrate the reload part with combo box implementation of Client ID
                //setCustomerID();
                // Refresh the currently displayed client with the latest ID
                //cmbCustID.setSelectedIndex(cmbCustID.getItemCount() - 1);
            } catch (IOException ex) {
                //Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        catch (Exception ex) {
            //highlightEmpty();
            JOptionPane.showMessageDialog(null, "Invalid input! Please check your input to proceed.", "Invalid insertion detected!", JOptionPane.ERROR_MESSAGE);
            // Continue with displaying which field was affected. ensure it appears before the mnessagebox
        }      
    }
    
    private void setCurrentDate(){
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH.mm.ss, dd-MM-yyyy");
        LocalDateTime now = LocalDateTime.now();
        txtPaymentDate.setText(dtf.format(now));
    }
    
    
     private void initForm(){
        this.setSize(1170,750);
        this.setLocation(600,150);
       // btnUpdate.setEnabled(false);
        loadUserProfile();
        setAppointmentID();
        setCurrentDate();
        // Set the initial value for new book
        // This anon class handles window closing event
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e){
                int selection = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Closing Window", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (selection == JOptionPane.YES_OPTION) {
                    //clearCache();
                    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                } else {
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                }
            }
        });
       // txaHomeAddress.getDocument().putProperty("filterNewlines", Boolean.TRUE);
      //  inputCharacterValidation();
     }
    // </editor-fold>
    
    private void txttotalPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txttotalPaymentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txttotalPaymentActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
//        deHighlightEmpty();
//        updateUserInfo();
          updatePayment();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void cmbApptIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbApptIDActionPerformed
        // TODO add your handling code here:
       // clearUser();
        if (cmbApptID.getSelectedIndex() > 0) {
            loadApptInfo();
          //  btnRegister.setEnabled(false);
           // btnUpdate.setEnabled(true);
           // btnDelete.setEnabled(true);
            
        } else {
            // Disabling action buttons when no book is loaded. Add button is still available to accept new book
           // btnRegister.setEnabled(true);
           // btnUpdate.setEnabled(false);
           // btnDelete.setEnabled(false);
            //txtManagerID.setVisible(false);
        }
        
    }//GEN-LAST:event_cmbApptIDActionPerformed

    private void txtTechIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTechIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTechIDActionPerformed

    private void txtPaymentAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPaymentAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPaymentAmountActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (Exception ex) {
            System.err.println("Fail Look and Feel");
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new APUHandleTask().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbApptID;
    private javax.swing.JComboBox<String> cmbPaymentStatus;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblApptDate;
    private javax.swing.JLabel lblPageTitle;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtAppliance;
    private javax.swing.JTextField txtApptDate;
    private javax.swing.JTextField txtApptTime;
    private javax.swing.JTextField txtCustomerName;
    private javax.swing.JTextField txtPaymentAmount;
    private javax.swing.JTextField txtPaymentDate;
    private javax.swing.JTextField txtTechID;
    private javax.swing.JTextField txttotalPayment;
    // End of variables declaration//GEN-END:variables
}
