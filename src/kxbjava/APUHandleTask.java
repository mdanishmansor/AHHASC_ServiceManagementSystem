/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kxbjava;

import com.formdev.flatlaf.FlatDarkLaf;
import com.itextpdf.kernel.colors.ColorConstants;
import static com.itextpdf.kernel.colors.ColorConstants.BLACK;
import static com.itextpdf.kernel.colors.ColorConstants.BLUE;
import static com.itextpdf.kernel.colors.ColorConstants.WHITE;
import com.itextpdf.kernel.colors.DeviceRgb;
import com.itextpdf.kernel.geom.PageSize;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.Style;
import com.itextpdf.layout.borders.Border;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.element.Text;
import com.itextpdf.layout.properties.TextAlignment;
import static com.itextpdf.layout.properties.TextAlignment.CENTER;
import static com.itextpdf.layout.properties.TextAlignment.LEFT;
import static com.itextpdf.layout.properties.TextAlignment.RIGHT;
import com.itextpdf.layout.properties.VerticalAlignment;
import com.itextpdf.styledxmlparser.jsoup.nodes.Element;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Currency;
import java.util.Date;
import java.util.Locale;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import org.joda.money.Money;

/**
 *
 * @author User
 */
public class APUHandleTask extends javax.swing.JFrame {

    private final String apptPrefix = "APPT";
    private final String feedPrefix = "FEED";
    private String FileDir, techID, ApptID, feedID, paymentID, cID, tcID, cmID, custname, appDate, appTime, applncs, bDate, atID;
    private int newFeedID;
    private DefaultComboBoxModel ApptList;
    private final String source = System.getProperty("user.dir") + "\\src\\TextFiles\\Feedback.txt";
    private final String invoicesource = System.getProperty("user.dir") + "\\src\\PDF\\Invoice.pdf";
    private final String receiptSource = System.getProperty("user.dir") + "\\src\\PDF\\Receipt.pdf";
    private Money totalAmount, paymentAmount, balanceAmount;
    private final Color ogtxt = new Color(237, 237, 237);

    /**
     * Creates new form APUHandleTask
     */
    public APUHandleTask() {
        initComponents();
        initForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        pnlHandleTask = new javax.swing.JPanel();
        btnPnl = new javax.swing.JPanel();
        btnPrintInvoice = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        lblDesc = new javax.swing.JLabel();
        lblTitle1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        cmbApptID = new javax.swing.JComboBox<>();
        txtCustomerName = new javax.swing.JTextField();
        txtApptTime = new javax.swing.JTextField();
        txttotalAmount = new javax.swing.JTextField();
        cmbPaymentStatus = new javax.swing.JComboBox<>();
        lblApptID = new javax.swing.JLabel();
        lblCustomerName = new javax.swing.JLabel();
        lblApptTime = new javax.swing.JLabel();
        lblTotalAmount = new javax.swing.JLabel();
        lblPaymentStatus = new javax.swing.JLabel();
        txtApptDate = new javax.swing.JTextField();
        txtAppliance = new javax.swing.JTextField();
        txtPaymentDate = new javax.swing.JTextField();
        txtApptFeedback = new javax.swing.JTextField();
        txtpaymentAmount = new javax.swing.JTextField();
        lblApptDate = new javax.swing.JLabel();
        lblAppliance = new javax.swing.JLabel();
        lblPaymentAmount = new javax.swing.JLabel();
        lblPaymenDate = new javax.swing.JLabel();
        lblFeedback = new javax.swing.JLabel();

        lblTitle.setBackground(new java.awt.Color(68, 68, 68));
        lblTitle.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(218, 0, 55));
        lblTitle.setText("User Profile");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlHandleTask.setBackground(new java.awt.Color(68, 68, 68));
        pnlHandleTask.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnPnl.setBackground(new java.awt.Color(68, 68, 68));

        btnPrintInvoice.setBackground(new java.awt.Color(68, 68, 68));
        btnPrintInvoice.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnPrintInvoice.setForeground(new java.awt.Color(237, 237, 237));
        btnPrintInvoice.setText("Print Invoice");
        btnPrintInvoice.setToolTipText("Button to reset every fields");
        btnPrintInvoice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnPrintInvoice.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPrintInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintInvoiceActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(68, 68, 68));
        btnBack.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnBack.setForeground(new java.awt.Color(237, 237, 237));
        btnBack.setText("Back");
        btnBack.setToolTipText("Button to reset every fields");
        btnBack.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(68, 68, 68));
        btnUpdate.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(237, 237, 237));
        btnUpdate.setText("Pay");
        btnUpdate.setToolTipText("Button to reset every fields");
        btnUpdate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnReset.setBackground(new java.awt.Color(68, 68, 68));
        btnReset.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnReset.setForeground(new java.awt.Color(237, 237, 237));
        btnReset.setText("Reset");
        btnReset.setToolTipText("Button to reset every fields");
        btnReset.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnReset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout btnPnlLayout = new javax.swing.GroupLayout(btnPnl);
        btnPnl.setLayout(btnPnlLayout);
        btnPnlLayout.setHorizontalGroup(
            btnPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnPnlLayout.createSequentialGroup()
                .addContainerGap(317, Short.MAX_VALUE)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnPrintInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );
        btnPnlLayout.setVerticalGroup(
            btnPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btnPnlLayout.createSequentialGroup()
                .addContainerGap(7, Short.MAX_VALUE)
                .addGroup(btnPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrintInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        pnlHandleTask.add(btnPnl, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 620, 1280, 100));

        lblDesc.setBackground(new java.awt.Color(68, 68, 68));
        lblDesc.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblDesc.setForeground(new java.awt.Color(255, 255, 255));
        lblDesc.setText("Insert Payment Provided By Customers");
        pnlHandleTask.add(lblDesc, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, -1, -1));

        lblTitle1.setBackground(new java.awt.Color(68, 68, 68));
        lblTitle1.setFont(new java.awt.Font("Arial", 1, 38)); // NOI18N
        lblTitle1.setForeground(new java.awt.Color(214, 41, 99));
        lblTitle1.setText("Handle Tasks");
        pnlHandleTask.add(lblTitle1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, -1, -1));

        jPanel3.setBackground(new java.awt.Color(68, 68, 68));

        cmbApptID.setBackground(new java.awt.Color(68, 68, 68));
        cmbApptID.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        cmbApptID.setForeground(new java.awt.Color(237, 237, 237));
        cmbApptID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Appointment ID" }));
        cmbApptID.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 255)));
        cmbApptID.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cmbApptID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbApptIDActionPerformed(evt);
            }
        });

        txtCustomerName.setBackground(new java.awt.Color(68, 68, 68));
        txtCustomerName.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtCustomerName.setForeground(new java.awt.Color(237, 237, 237));
        txtCustomerName.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));

        txtApptTime.setEditable(false);
        txtApptTime.setBackground(new java.awt.Color(68, 68, 68));
        txtApptTime.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtApptTime.setForeground(new java.awt.Color(237, 237, 237));
        txtApptTime.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));

        txttotalAmount.setBackground(new java.awt.Color(68, 68, 68));
        txttotalAmount.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txttotalAmount.setForeground(new java.awt.Color(237, 237, 237));
        txttotalAmount.setText("MYR");
        txttotalAmount.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));
        txttotalAmount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txttotalAmountFocusLost(evt);
            }
        });

        cmbPaymentStatus.setBackground(new java.awt.Color(68, 68, 68));
        cmbPaymentStatus.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        cmbPaymentStatus.setForeground(new java.awt.Color(237, 237, 237));
        cmbPaymentStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Payment Status", "Unpaid", "Paid" }));
        cmbPaymentStatus.setToolTipText("Payment Status of the Task");
        cmbPaymentStatus.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 255)));
        cmbPaymentStatus.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        lblApptID.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblApptID.setText("Appointment ID");

        lblCustomerName.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblCustomerName.setText("Customer Name");

        lblApptTime.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblApptTime.setText("Appointment Time");

        lblTotalAmount.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblTotalAmount.setText("Total Amount");

        lblPaymentStatus.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblPaymentStatus.setText("Payment Status");

        txtApptDate.setBackground(new java.awt.Color(68, 68, 68));
        txtApptDate.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtApptDate.setForeground(new java.awt.Color(237, 237, 237));
        txtApptDate.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));

        txtAppliance.setBackground(new java.awt.Color(68, 68, 68));
        txtAppliance.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtAppliance.setForeground(new java.awt.Color(237, 237, 237));
        txtAppliance.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));

        txtPaymentDate.setEditable(false);
        txtPaymentDate.setBackground(new java.awt.Color(68, 68, 68));
        txtPaymentDate.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtPaymentDate.setForeground(new java.awt.Color(237, 237, 237));
        txtPaymentDate.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));

        txtApptFeedback.setBackground(new java.awt.Color(68, 68, 68));
        txtApptFeedback.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtApptFeedback.setForeground(new java.awt.Color(237, 237, 237));
        txtApptFeedback.setToolTipText("Customer Feedback");
        txtApptFeedback.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));

        txtpaymentAmount.setBackground(new java.awt.Color(68, 68, 68));
        txtpaymentAmount.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtpaymentAmount.setForeground(new java.awt.Color(237, 237, 237));
        txtpaymentAmount.setText("MYR");
        txtpaymentAmount.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));
        txtpaymentAmount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtpaymentAmountFocusLost(evt);
            }
        });

        lblApptDate.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblApptDate.setText("Appointment Date");

        lblAppliance.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblAppliance.setText("Appliance");

        lblPaymentAmount.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblPaymentAmount.setText("Payment Amount");

        lblPaymenDate.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblPaymenDate.setText("Payment Date");

        lblFeedback.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblFeedback.setText("Feedback");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(221, 221, 221)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPaymentStatus)
                    .addComponent(lblTotalAmount)
                    .addComponent(lblApptTime)
                    .addComponent(lblCustomerName)
                    .addComponent(lblApptID)
                    .addComponent(cmbPaymentStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txttotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtApptTime, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbApptID, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblApptDate)
                            .addComponent(txtApptDate, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(245, 245, 245))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAppliance)
                            .addComponent(txtAppliance, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPaymenDate)
                            .addComponent(txtPaymentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPaymentAmount)
                            .addComponent(txtpaymentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFeedback)
                            .addComponent(txtApptFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblApptDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtApptDate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblAppliance)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAppliance, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblPaymenDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPaymentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblPaymentAmount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtpaymentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblFeedback)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtApptFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblApptID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbApptID, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblCustomerName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblApptTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtApptTime, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(lblTotalAmount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txttotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblPaymentStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbPaymentStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        pnlHandleTask.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 1260, 470));

        getContentPane().add(pnlHandleTask, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, 720));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // <editor-fold defaultstate="collapsed" desc="Methods">   
    private void setLogo() {
        String sourcefolder = System.getProperty("user.dir") + "\\src\\icons\\";
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(sourcefolder + "AHHASCrsmol.png"));
        this.setTitle("AHHASC Handle Tasks Page");

    }

    private void loadUserProfile() {
        String[] matchedID = null;
        FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
        File usertext = new File(FileDir + "UserCache.txt");
        Scanner intUser;
        try {
            intUser = new Scanner(usertext);
            while (intUser.hasNext()) {
                String bEntry = intUser.nextLine();
                matchedID = bEntry.split(":");
                techID = matchedID[0];
            }
            intUser.close();
        } catch (FileNotFoundException ex) {
            //Logger.getLogger(.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadAppoitnment() {
        String[] matchedID = null;
        FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
        File appttext = new File(FileDir + "Appointment.txt");
        atID = (String) cmbApptID.getSelectedItem();
        Scanner intUser;
        try {
            intUser = new Scanner(appttext);
            while (intUser.hasNext()) {
                String bEntry = intUser.nextLine();
                matchedID = bEntry.split(":");
                matchedID[0] = matchedID[0].replace(apptPrefix, "");
                if (matchedID[0].equals(atID)) {
                    cID = matchedID[1];
                    tcID = matchedID[2];
                    cmID = matchedID[3];
                    custname = matchedID[4];
                    appDate = matchedID[5];
                    appTime = matchedID[6];
                    applncs = matchedID[7];
                    bDate = matchedID[8];

                }
            }
            intUser.close();
        } catch (FileNotFoundException ex) {
            //Logger.getLogger(.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setAppointmentID() {
        // This is to ensure the entire method have access to borrow matchedID array
        String[] matchedID = null;
        ApptList = new DefaultComboBoxModel();
        // Adding default text
        ApptList.addElement("Select Appointment ID");
        cmbApptID.setModel(ApptList);
        FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
        File appttxt = new File(FileDir + "Payment.txt");

        Scanner intAppt;
        try {
            // This part loads all book information
            intAppt = new Scanner(appttxt);
            // This is to increment the discovered client assignment index
            int i = 0;
            // Read lines from the file until no more are left.
            while (intAppt.hasNext()) {
                // Read the next line.
                String bEntry = intAppt.nextLine();
                // Split the line by using the delimiterÂ ":" (semicolon) and store into array.
                matchedID = bEntry.split(":");
                if ("true".equals(matchedID[12]) && matchedID[1].contains("APPT") && matchedID[2].equals(techID) && matchedID[7].equals("Unpaid")) {
                    matchedID[1] = matchedID[1].replace(apptPrefix, "");
                    ApptList.addElement(matchedID[1]);
                    i++;
                }

            }
            // OptionPane.showMessageDialog(null, i);
            intAppt.close();
            // Check if there are no clients at all for each type
            if (ApptList.getSize() == 1) {
                ApptList.removeAllElements();
                ApptList.addElement("No customer(s) available.");
            }
            // Attempt to list all fetched client ID into the list box
            cmbApptID.setModel(ApptList);
            // Select index 0 as default
            cmbApptID.setSelectedIndex(0);
        } catch (FileNotFoundException ex) {
            //Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadApptInfo() {
        // Assigning the cID to the selected index value
        ApptID = (String) cmbApptID.getSelectedItem();
        // This is to ensure the entire method have access to borrow matchedID array
        String[] matchedID = null;
        FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
        // For debugging purpose only
        // JOptionPane.showMessageDialog(null, bID);
        File appttxt = new File(FileDir + "Payment.txt");
        Scanner intAppt;
        try {
            // This part loads all book information
            intAppt = new Scanner(appttxt);
            // Read lines from the file until no more are left.
            while (intAppt.hasNext()) {
                // Read the next line.
                String bEntry = intAppt.nextLine();
                // Split the line by using the delimiter ":" (semicolon) and store into array.
                matchedID = bEntry.split(":");
                matchedID[1] = matchedID[1].replace(apptPrefix, "");
                // JOptionPane.showMessageDialog(null, i);
                if (cmbApptID.getSelectedItem().equals(matchedID[1])) {
                    paymentID = matchedID[0];
                    techID = matchedID[2];
                    txtCustomerName.setText(matchedID[3]);
                    txtApptDate.setText(matchedID[4]);
                    txtApptTime.setText(matchedID[5]);
                    txtAppliance.setText(matchedID[6]);
                    switch (matchedID[7]) {
                        case "Unpaid":
                            cmbPaymentStatus.setSelectedIndex(1);
                            break;
                        case "Paid":
                            cmbPaymentStatus.setSelectedIndex(2);
                            break;
                        default:
                            cmbPaymentStatus.setSelectedIndex(1);
                    }
//                    txtEmail.setText(matchedID[5]);
//                    txtDOB.setText(matchedID[6]);
//                    txtManagerID.setText(matchedID[7]);
                }
            }
            intAppt.close();
        } catch (FileNotFoundException ex) {
            // Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void updatePayment() {
        // TODO add your handling code here:
        try {
            // Check if textfields are empty
            emptyFields();
            // To get directory  
            FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
            // To get the book ID
            ApptID = (String) cmbApptID.getSelectedItem();
            // To rename original book.txt to book.bak
            File paymentOri = new File(FileDir + "Payment.txt");
            File paymentBack = new File(FileDir + "PaymentBack.txt");
            // To check if clientBak.txt is present or not
            if (!paymentBack.exists()) {
                paymentOri.createNewFile();
            }
            // This is for debugging only!
            // JOptionPane.showMessageDialog(null, "renamed");
            // This is to rename the existing book.txt to clientBak.txt
            paymentOri.renameTo(paymentBack);
            // This is to open, find and replace a specific book record
            // Requires temporary file to store current state
            // FileWriter to write into a new file called book.txt
            FileWriter cd = new FileWriter(FileDir + "Payment.txt");
            // PrintWriter to print into book.txt
            PrintWriter cdp = new PrintWriter(cd);
            // This is to open and read clientBak.txt 
            File paymenttxt = new File(FileDir + "PaymentBack.txt");
            // This is to instantiate the file opened earlier
            Scanner inputFile = new Scanner(paymenttxt);
            // This array is to contain all lines
            String[] matchedID;
            // This is only for debugging!
            // boolean itWorked = false;
            // Read lines from the file until no more are left.
            while (inputFile.hasNext()) {
                // This is for debugging only!
                // JOptionPane.showMessageDialog(null, "In loop");
                // Read the next line.
                String bEntry = inputFile.nextLine();
                // Split the line by using the delimiter ":" (semicolon) and store into array.
                matchedID = bEntry.split(":");
                // Check if the read line has current book ID
                if (matchedID[1].equals(apptPrefix + ApptID)) {

                    totalAmount = Money.parse(txttotalAmount.getText());
                    paymentAmount = Money.parse(txtpaymentAmount.getText());

                    if (paymentAmount.isLessThan(totalAmount)) {
                        JOptionPane.showMessageDialog(null, "Total payment is not enough", "Payment failed", JOptionPane.ERROR_MESSAGE);
                    } else {

                        if (cmbPaymentStatus.getSelectedIndex() <= 1) {
                            JOptionPane.showMessageDialog(null, "Payment status was not set to paid, autoset it to Paid", "Payment Status unselected!", JOptionPane.ERROR_MESSAGE);
                            cmbPaymentStatus.setSelectedIndex(2);
                        }

                        balanceAmount = paymentAmount.minus(totalAmount);
                        matchedID[0] = paymentID;
                        matchedID[2] = techID;
                        matchedID[3] = txtCustomerName.getText();
                        matchedID[4] = txtApptDate.getText();
                        matchedID[5] = txtApptTime.getText();
                        matchedID[6] = txtAppliance.getText();
                        matchedID[7] = (String) cmbPaymentStatus.getSelectedItem();
                        matchedID[8] = txtPaymentDate.getText();
                        matchedID[9] = totalAmount.toString();
                        matchedID[10] = paymentAmount.toString();
                        matchedID[11] = balanceAmount.toString();
                        matchedID[12] = "true";

                        insertFeedback();
                        updateApptStatus();

                        JOptionPane.showMessageDialog(null, "Customer has paid for the service, balance is: " + balanceAmount, "Payment made", JOptionPane.INFORMATION_MESSAGE);
                        printReceipt();

                    }

                    //JOptionPane.showMessageDialog(null, "Customer has paid for the service, balance is:RM" + balanceAmount, "Payment made", JOptionPane.INFORMATION_MESSAGE);
                    // Inserting the new information from the text fields into the book line
                }
                // Rewrite the new book.txt with values found in clientBak.txt
                cdp.println(matchedID[0] + ":"
                        + matchedID[1] + ":"
                        + matchedID[2] + ":"
                        + matchedID[3] + ":"
                        + matchedID[4] + ":"
                        + matchedID[5] + ":"
                        + matchedID[6] + ":"
                        + matchedID[7] + ":"
                        + matchedID[8] + ":"
                        + matchedID[9] + ":"
                        + matchedID[10] + ":"
                        + matchedID[11] + ":"
                        + matchedID[12]);

            }
            // Close the clientBak.txt reader
            inputFile.close();
            // This deletes clientBak.txt
            paymentBack.delete();
            // This closes the book.txt printer 
            cdp.close();
            clearPayment();
            setCurrentDate();
        } catch (Exception ex) {
            highlightEmpty();
            JOptionPane.showMessageDialog(null, "Invalid input! Please check your input to proceed.", "Invalid insertion detected!", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void updateApptStatus() {
        // TODO add your handling code here:
        try {
            // Check if textfields are empty
            //emptyFields();
            // To get directory  
            FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
            // To get the book ID
            //ApptID = (String) cmbApptID.getSelectedItem();
            // To rename original book.txt to book.bak
            File ApptOri = new File(FileDir + "Appointment.txt");
            File ApptBack = new File(FileDir + "AppointmentBack.txt");
            // To check if clientBak.txt is present or not
            if (!ApptBack.exists()) {
                ApptOri.createNewFile();
            }
            // This is for debugging only!
            // JOptionPane.showMessageDialog(null, "renamed");
            // This is to rename the existing book.txt to clientBak.txt
            ApptOri.renameTo(ApptBack);
            // This is to open, find and replace a specific book record
            // Requires temporary file to store current state
            // FileWriter to write into a new file called book.txt
            FileWriter cd = new FileWriter(FileDir + "Appointment.txt");
            // PrintWriter to print into book.txt
            PrintWriter cdp = new PrintWriter(cd);
            // This is to open and read clientBak.txt 
            File appttxt = new File(FileDir + "AppointmentBack.txt");
            // This is to instantiate the file opened earlier
            Scanner inputFile = new Scanner(appttxt);
            // This array is to contain all lines
            String[] matchedID;
            // This is only for debugging!
            // boolean itWorked = false;
            // Read lines from the file until no more are left.
            while (inputFile.hasNext()) {
                // This is for debugging only!
                // JOptionPane.showMessageDialog(null, "In loop");
                // Read the next line.
                String bEntry = inputFile.nextLine();
                // Split the line by using the delimiter ":" (semicolon) and store into array.
                matchedID = bEntry.split(":");
                // Check if the read line has current book ID
                if (matchedID[0].equals(apptPrefix + atID)) {
                    matchedID[1] = cID;
                    matchedID[2] = tcID;
                    matchedID[3] = cmID;
                    matchedID[4] = custname;
                    matchedID[5] = appDate;
                    matchedID[6] = appTime;
                    matchedID[7] = applncs;
                    matchedID[8] = bDate;
                    matchedID[9] = "COMPLETED";
                    matchedID[10] = "true";

                }
                //JOptionPane.showMessageDialog(null, "Customer has paid for the service, balance is:RM" + balanceAmount, "Payment made", JOptionPane.INFORMATION_MESSAGE);
                // Inserting the new information from the text fields into the book line
                cdp.println(matchedID[0] + ":"
                        + matchedID[1] + ":"
                        + matchedID[2] + ":"
                        + matchedID[3] + ":"
                        + matchedID[4] + ":"
                        + matchedID[5] + ":"
                        + matchedID[6] + ":"
                        + matchedID[7] + ":"
                        + matchedID[8] + ":"
                        + matchedID[9] + ":"
                        + matchedID[10]);

            }
            // Rewrite the new book.txt with values found in clientBak.txtcd
            // Close the clientBak.txt reader
            inputFile.close();
            // This deletes clientBak.txt
            ApptBack.delete();
            // This closes the book.txt printer 
            cdp.close();
        } catch (Exception ex) {
            //highlightEmpty();
            JOptionPane.showMessageDialog(null, "Invalid input! Please check your input to proceed.", "Invalid insertion detected!", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void feedbackIDIncrementor() {
        // This is to ensure the entire method have access to the matchedID array
        String[] matchedID = null;
        // This flag is to check if the while loop is triggered or not. Triggered while loop indicates presence of records but relevance might not
        boolean hasRecord = false;

        try {
            FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
            // For debugging purpose only
            // JOptionPane.showMessageDialog(null, bID);
            File feedbacktxt = new File(FileDir + "Feedback.txt");
            if (!feedbacktxt.exists()) {
                feedbacktxt.createNewFile();
            }
            Scanner inputFile;
            try {
                inputFile = new Scanner(feedbacktxt);
                // Read lines from the file until no more are left.
                while (inputFile.hasNext()) {
                    // Read the next line.
                    String bEntry = inputFile.nextLine();
                    // Split the line by using the delimiterÂ ":" (semicolon) and store into array.
                    matchedID = bEntry.split(":");
                    String temptype = null;
//                   if (matchedID[0].contains("STA")) {
//                       temptype = "STA";
//                   } else if (matchedID[0].contains("STU")) {
//                       temptype = "STU";
//                   }
                    matchedID[0] = matchedID[0].replace(feedPrefix, "");
                    hasRecord = true;
                }
                inputFile.close();
                if (!hasRecord) {
                    newFeedID = 1;
                } else {
                    newFeedID = Integer.parseInt(matchedID[0]) + 1;
                }
            } catch (FileNotFoundException ex) {
                //Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
            JOptionPane.showMessageDialog(null, "Invalid input! Customer can only consist of numbers", "Invalid input type!", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void insertFeedback() {
        // Declaring file extension used
        String apptPrefix = "APPT";
        FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
        // Formatting ID into formal 6-digit mask
        DecimalFormat dc = new DecimalFormat("00000");
        try {
            emptyFields();
            // Fetching IDs from the textfields
            feedID = dc.format(newFeedID);
            String appointment_ID = (String) cmbApptID.getSelectedItem();
            //String TechID = txtTechID.getText();
            String paymentStatus = (String) cmbPaymentStatus.getSelectedItem();
            String apptFeedback = txtApptFeedback.getText();
            //String CustGender = (String) cmbGender.getSelectedItem();
            //String CustEmail = txtEmail.getText();
            // String CustDOB = txtDOB.getText();
            // FileWriter and PrintWriter to create and write into book.txt
            try {
                // FileWriter to write into a new file called client.txt
                FileWriter cd = new FileWriter(FileDir + "Feedback.txt", true);
                // PrintWriter to print into client.txt
                PrintWriter cdp = new PrintWriter(cd);
                // To print the line into Borrowing textfile
                cdp.println(feedPrefix + feedID + ":"
                        + apptPrefix + appointment_ID + ":"
                        + techID + ":"
                        + paymentStatus + ":"
                        + apptFeedback + ":"
                        + "true"); //true boolean indicating the user is exisiting (non-deleted)

                cdp.close();
                cd.close();
                // To display completed borrowing process status
                //JOptionPane.showMessageDialog(null, "Client is successfully added! Press OK to return to client management form.", "Adding client succeeded!", JOptionPane.INFORMATION_MESSAGE);
                // To refresh new ID 
                feedbackIDIncrementor();
                setAppointmentID();
                clearPayment();
                // JOptionPane.showMessageDialog(null, newClientID);
                // To reload the client information
                // Integrate the reload part with combo box implementation of Client ID
                //setCustomerID();
                // Refresh the currently displayed client with the latest ID
                //cmbCustID.setSelectedIndex(cmbCustID.getItemCount() - 1);
            } catch (IOException ex) {
                //Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception ex) {
            highlightEmpty();
            // Continue with displaying which field was affected. ensure it appears before the mnessagebox
        }
    }

    private void printInvoice() throws IOException, FileNotFoundException {

        PdfWriter writer = new PdfWriter(invoicesource);
        PdfDocument pdfdoc = new PdfDocument(writer);
        Document document = new Document(pdfdoc);
        pdfdoc.setDefaultPageSize(PageSize.A4);

        float width = 280f;
        float columnWidth[] = {width, width};
        Table tbl = new Table(columnWidth);

        tbl.addCell(new Cell(1, 2).add(new Paragraph("AHHASC").setFontSize(30f).setBold().setFontColor(new DeviceRgb(66, 133, 244))).setBorder(Border.NO_BORDER));

        tbl.addCell(new Cell().add(new Paragraph("Danish & Irfan Service")).setBorder(Border.NO_BORDER).setTextAlignment(LEFT));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));

        tbl.addCell(new Cell().add(new Paragraph("0126764728")).setBorder(Border.NO_BORDER).setTextAlignment(LEFT));

        tbl.addCell(new Cell().add(new Paragraph("\n")).setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));

        Text textBilledTo = new Text("BILLED TO\n");
        textBilledTo.setBold();
        textBilledTo.setFontColor(new DeviceRgb(66, 133, 244));
        Paragraph billedto = new Paragraph();
        billedto.add(textBilledTo);
        String customerName = txtCustomerName.getText();
        billedto.add(customerName);

        tbl.addCell(new Cell().add(billedto).setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));

        tbl.addCell(new Cell(2, 1).add(new Paragraph("INVOICE").setBold().setFontSize(24).setFontColor(new DeviceRgb(66, 133, 244))).setBorder(Border.NO_BORDER).setTextAlignment(LEFT));
        tbl.addCell(new Cell().add(new Paragraph("\n")).setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));

        Text textDateOfIssue = new Text("DATE OF ISSUE\n");
        textDateOfIssue.setBold().setFontColor(new DeviceRgb(23, 23, 23));
        Paragraph paragraphDateOfIssue = new Paragraph();
        paragraphDateOfIssue.add(textDateOfIssue);
        String invoiceiIssue = txtApptDate.getText();
        paragraphDateOfIssue.add(invoiceiIssue);

        tbl.addCell(new Cell(3, 1).add(paragraphDateOfIssue).setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));

        float itemColWidth[] = {403, 200};
        Table itemTable = new Table(itemColWidth);

        itemTable.addCell("Description").setBackgroundColor(new DeviceRgb(0, 157, 196)).setFontColor(new DeviceRgb(237, 237, 237)).setTextAlignment(CENTER);
        itemTable.addCell("Amount").setBackgroundColor(new DeviceRgb(0, 157, 196)).setFontColor(new DeviceRgb(237, 237, 237)).setTextAlignment(CENTER);

        Table dataTable = new Table(itemColWidth);
        String APPLIANCE = txtAppliance.getText();
        String ttlAmount = txttotalAmount.getText();

        dataTable.addCell(APPLIANCE).setBackgroundColor(WHITE).setTextAlignment(CENTER);
        dataTable.addCell(ttlAmount).setBackgroundColor(WHITE).setTextAlignment(CENTER);

        Table paymentTable = new Table(itemColWidth);

        paymentTable.addCell(new Cell().add(new Paragraph("Total Amount:")).setBorder(Border.NO_BORDER).setTextAlignment(RIGHT));
        paymentTable.addCell(new Cell().add(new Paragraph(ttlAmount)).setBorder(Border.NO_BORDER).setTextAlignment(CENTER));

        Paragraph tc = new Paragraph("\n PAYMENT MUST BE MADE ASAP");
        //tbl.addCell(new Cell().add(new Paragraph("test")));
        //write into the pdf
        document.add(tbl);
        document.add(itemTable);
        document.add(dataTable);
        document.add(paymentTable);
        document.add(tc);
        document.close();
        JOptionPane.showMessageDialog(null, "Invoice created successfully", "Records Printed!", JOptionPane.INFORMATION_MESSAGE);
    }

    private void printReceipt() throws IOException, FileNotFoundException {

        PdfWriter writer = new PdfWriter(receiptSource);
        PdfDocument pdfdoc = new PdfDocument(writer);
        Document document = new Document(pdfdoc);
        pdfdoc.setDefaultPageSize(PageSize.A4);

        float width = 280f;
        float columnWidth[] = {width, width};
        Table tbl = new Table(columnWidth);

        tbl.addCell(new Cell(1, 2).add(new Paragraph("AHHASC").setFontSize(30f).setBold().setFontColor(new DeviceRgb(66, 133, 244))).setBorder(Border.NO_BORDER));

        tbl.addCell(new Cell().add(new Paragraph("Danish & Irfan Service")).setBold().setBorder(Border.NO_BORDER).setTextAlignment(LEFT));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));

        tbl.addCell(new Cell().add(new Paragraph("0126764728")).setBold().setBorder(Border.NO_BORDER).setTextAlignment(LEFT));

        tbl.addCell(new Cell().add(new Paragraph("\n")).setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));

        Text textBilledTo = new Text("RECEIPT TO\n");
        textBilledTo.setBold();
        textBilledTo.setFontColor(new DeviceRgb(66, 133, 244));
        Paragraph billedto = new Paragraph();
        billedto.add(textBilledTo);
        String customerName = txtCustomerName.getText();
        billedto.add(customerName);

        tbl.addCell(new Cell().add(billedto).setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));

        tbl.addCell(new Cell(2, 1).add(new Paragraph("PAYMENT RECEIPT").setBold().setFontSize(24).setFontColor(new DeviceRgb(66, 133, 244))).setBorder(Border.NO_BORDER).setTextAlignment(LEFT));
        tbl.addCell(new Cell().add(new Paragraph("\n")).setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));

        Text textDateOfIssue = new Text("DATE OF ISSUE\n");
        textDateOfIssue.setBold().setFontColor(new DeviceRgb(23, 23, 23));
        Paragraph paragraphDateOfIssue = new Paragraph();
        paragraphDateOfIssue.add(textDateOfIssue);
        String invoiceiIssue = txtPaymentDate.getText();
        paragraphDateOfIssue.add(invoiceiIssue);

        tbl.addCell(new Cell(3, 1).add(paragraphDateOfIssue).setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));
        tbl.addCell(new Cell().setBorder(Border.NO_BORDER));

        float itemColWidth[] = {400, 200};
        Table itemTable = new Table(itemColWidth);

        itemTable.addCell("Description").setBackgroundColor(new DeviceRgb(0, 157, 196)).setFontColor(new DeviceRgb(237, 237, 237)).setTextAlignment(CENTER);
        itemTable.addCell("Amount").setBackgroundColor(new DeviceRgb(0, 157, 196)).setFontColor(new DeviceRgb(237, 237, 237)).setTextAlignment(CENTER);

        float dataColWidth[] = {420, 200};
        Table dataTable = new Table(dataColWidth);
        String APPLIANCE = txtAppliance.getText();
        String ttlAmount = txttotalAmount.getText();

        String pymentAmount = txtpaymentAmount.getText();

        dataTable.addCell(APPLIANCE).setBackgroundColor(WHITE).setTextAlignment(CENTER);
        dataTable.addCell(ttlAmount).setBackgroundColor(WHITE).setTextAlignment(CENTER);

        Table paymentTable = new Table(dataColWidth);

        paymentTable.addCell(new Cell().add(new Paragraph("Total Amount:")).setBorder(Border.NO_BORDER).setTextAlignment(RIGHT));
        paymentTable.addCell(new Cell().add(new Paragraph(ttlAmount)).setBorder(Border.NO_BORDER).setTextAlignment(CENTER));

        paymentTable.addCell(new Cell().add(new Paragraph("Payment Amount:")).setBorder(Border.NO_BORDER).setTextAlignment(RIGHT));
        paymentTable.addCell(new Cell().add(new Paragraph(pymentAmount)).setBorder(Border.NO_BORDER).setTextAlignment(CENTER));

        paymentTable.addCell(new Cell().add(new Paragraph("Balance Amount:")).setBorder(Border.NO_BORDER).setTextAlignment(RIGHT));
        paymentTable.addCell(new Cell().add(new Paragraph(balanceAmount.toString())).setBorder(Border.NO_BORDER).setTextAlignment(CENTER));

        Paragraph tc = new Paragraph("\n Payment has been made by" + "" + customerName);
        //tbl.addCell(new Cell().add(new Paragraph("test")));
        //write into the pdf
        document.add(tbl);
        document.add(itemTable);
        document.add(dataTable);
        document.add(paymentTable);
        document.add(tc);
        document.close();
        JOptionPane.showMessageDialog(null, "Receipt has been printed!", "Records printed into PDF!", JOptionPane.INFORMATION_MESSAGE);
    }

    private void setCurrentDate() {
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH.mm.ss, dd-MM-yyyy");
        LocalDateTime now = LocalDateTime.now();
        txtPaymentDate.setText(dtf.format(now));
    }

    private void clearCache() {
        try {
            FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
            File cache = new File(FileDir + "UserCache.txt");
            if (cache.exists()) {
                cache.delete();
            }
        } catch (Exception ex) {

        }
    }

    private void clearPayment() {
        cmbApptID.setSelectedIndex(0);
        txtApptDate.setText("");
        txtCustomerName.setText("");
        txtAppliance.setText("");
        txtApptTime.setText("");
        txtPaymentDate.setText("");
        txttotalAmount.setText("MYR");
        txtpaymentAmount.setText("MYR");
        txtApptFeedback.setText("");
        cmbPaymentStatus.setSelectedIndex(1);
    }

    private void emptyFields() throws Exception {
        PaymentValidation vd = new PaymentValidation();
        if ("".equals(txtApptDate.getText())) {
            throw new Exception("Empty appt date");
        }
        if ("".equals(txtCustomerName.getText())) {
            throw new Exception("Empty customer name");
        }
        if ("".equals(txtAppliance.getText())) {
            throw new Exception("Empty appliance");
        }
        if ("".equals(txtApptTime.getText())) {
            throw new Exception("Empty appt time");
        }
        if ("".equals(txtPaymentDate.getText())) {
            throw new Exception("Empty payment date");
        }
        if ("".equals(txttotalAmount.getText()) || "MYR".equals(txttotalAmount.getText())) {
            throw new Exception("Empty total amount");
        }
        if ("".equals(txtpaymentAmount.getText()) || "MYR".equals(txtpaymentAmount.getText())) {
            throw new Exception("Empty payment amount");
        }
        if ("".equals(txtApptFeedback.getText())) {
            throw new Exception("Empty customer feedback");
        }
        if (cmbApptID.getSelectedIndex() < 1) {
            throw new Exception("Empty appt ID");
        }
        if (cmbPaymentStatus.getSelectedIndex() < 1) {
            throw new Exception("Not selected payment status");
        }

    }

    private void highlightEmpty() {
        if ("".equals(txtApptDate.getText())) {
            lblApptDate.setForeground(Color.RED);
        }
        if ("".equals(txtCustomerName.getText())) {
            lblCustomerName.setForeground(Color.RED);
        }
        if ("".equals(txtAppliance.getText())) {
            lblAppliance.setForeground(Color.RED);
        }
        if ("".equals(txtApptTime.getText())) {
            lblApptTime.setForeground(Color.RED);
        }
        if ("".equals(txtPaymentDate.getText())) {
            lblPaymenDate.setForeground(Color.RED);
        }
        if ("".equals(txttotalAmount.getText()) || "MYR".equals(txttotalAmount.getText())) {
            lblTotalAmount.setForeground(Color.RED);
        }
        if ("".equals(txtpaymentAmount.getText()) || "MYR".equals(txtpaymentAmount.getText())) {
            lblPaymentAmount.setForeground(Color.RED);
        }
        if ("".equals(txtApptFeedback.getText())) {
            lblFeedback.setForeground(Color.RED);
        }
        if (cmbApptID.getSelectedIndex() < 1) {
            lblApptID.setForeground(Color.RED);
        }
        if (cmbPaymentStatus.getSelectedIndex() < 1) {
            lblPaymentStatus.setForeground(Color.RED);
        }
    }

    private void deHighlightEmpty() {
        lblApptDate.setForeground(ogtxt);
        lblCustomerName.setForeground(ogtxt);
        lblAppliance.setForeground(ogtxt);
        lblApptTime.setForeground(ogtxt);
        lblPaymenDate.setForeground(ogtxt);
        lblTotalAmount.setForeground(ogtxt);
        lblPaymentAmount.setForeground(ogtxt);
        lblFeedback.setForeground(ogtxt);
        lblApptID.setForeground(ogtxt);
        lblPaymentStatus.setForeground(ogtxt);
    }

    private void initForm() {
        this.setLocationRelativeTo(null);
        setLogo();
        btnUpdate.setEnabled(false);
        loadUserProfile();
        setAppointmentID();
        setCurrentDate();
        feedbackIDIncrementor();
        // Set the initial value for new book
        // This anon class handles window closing event
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                int selection = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Closing Window", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (selection == JOptionPane.YES_OPTION) {
                    clearCache();
                    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                } else {
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                }
            }
        });
        // txaHomeAddress.getDocument().putProperty("filterNewlines", Boolean.TRUE);
        //  inputCharacterValidation();
    }
    // </editor-fold>

    private void cmbApptIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbApptIDActionPerformed
        // TODO add your handling code here:
        // clearUser();
        if (cmbApptID.getSelectedIndex() > 0) {
            loadApptInfo();
            loadAppoitnment();
            btnUpdate.setEnabled(true);

        } else {
            btnUpdate.setEnabled(false);
        }

    }//GEN-LAST:event_cmbApptIDActionPerformed

    private void txttotalAmountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txttotalAmountFocusLost
        // TODO add your handling code here:
        PaymentValidation vd = new PaymentValidation();
        vd.runValidate(txttotalAmount, true);
    }//GEN-LAST:event_txttotalAmountFocusLost

    private void txtpaymentAmountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtpaymentAmountFocusLost
        // TODO add your handling code here:
        PaymentValidation vd = new PaymentValidation();
        vd.runValidate(txtpaymentAmount, true);
    }//GEN-LAST:event_txtpaymentAmountFocusLost

    private void btnPrintInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintInvoiceActionPerformed
        try {
            printInvoice();
        } catch (IOException ex) {
            Logger.getLogger(APUHandleTask.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPrintInvoiceActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        int selection = JOptionPane.showConfirmDialog(null, "Are you sure to go back?", "Back to Main Menu", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (selection == JOptionPane.YES_OPTION) {
            new APUTCMenu().setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        deHighlightEmpty();
        updatePayment();

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        clearPayment();
        setCurrentDate();
    }//GEN-LAST:event_btnResetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (Exception ex) {
            System.err.println("Fail Look and Feel");
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new APUHandleTask().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JPanel btnPnl;
    private javax.swing.JButton btnPrintInvoice;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbApptID;
    private javax.swing.JComboBox<String> cmbPaymentStatus;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblAppliance;
    private javax.swing.JLabel lblApptDate;
    private javax.swing.JLabel lblApptID;
    private javax.swing.JLabel lblApptTime;
    private javax.swing.JLabel lblCustomerName;
    private javax.swing.JLabel lblDesc;
    private javax.swing.JLabel lblFeedback;
    private javax.swing.JLabel lblPaymenDate;
    private javax.swing.JLabel lblPaymentAmount;
    private javax.swing.JLabel lblPaymentStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JLabel lblTotalAmount;
    private javax.swing.JPanel pnlHandleTask;
    private javax.swing.JTextField txtAppliance;
    private javax.swing.JTextField txtApptDate;
    private javax.swing.JTextField txtApptFeedback;
    private javax.swing.JTextField txtApptTime;
    private javax.swing.JTextField txtCustomerName;
    private javax.swing.JTextField txtPaymentDate;
    private javax.swing.JTextField txtpaymentAmount;
    private javax.swing.JTextField txttotalAmount;
    // End of variables declaration//GEN-END:variables

    private void insertCell(Table tbl, String invoice) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
