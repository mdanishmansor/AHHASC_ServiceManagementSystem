/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kxbjava;

import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Currency;
import java.util.Date;
import java.util.Locale;
import java.util.Scanner;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import org.joda.money.Money;

/**
 *
 * @author User
 */
public class APUHandleTask extends javax.swing.JFrame {
    
    private final String apptPrefix = "APPT";
    private final String feedPrefix = "FEED";
    private String FileDir, techID, ApptID, feedID, paymentID;
    private int newFeedID;
    private DefaultComboBoxModel ApptList;
    private final String source = System.getProperty("user.dir") + "\\src\\TextFiles\\Feedback.txt";
    private Money totalAmount, paymentAmount, balanceAmount; 
    private final Color ogtxt = new Color(237,237,237);
    
    
    
    /**
     * Creates new form APUHandleTask
     */
    public APUHandleTask() {
        initComponents();
        initForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        pnlHandleTask = new javax.swing.JPanel();
        lblPageTitle = new javax.swing.JLabel();
        cmbApptID = new javax.swing.JComboBox<>();
        txtApptDate = new javax.swing.JTextField();
        lblApptID = new javax.swing.JLabel();
        txtCustomerName = new javax.swing.JTextField();
        txtAppliance = new javax.swing.JTextField();
        txtApptTime = new javax.swing.JTextField();
        txttotalAmount = new javax.swing.JTextField();
        txtPaymentDate = new javax.swing.JTextField();
        cmbPaymentStatus = new javax.swing.JComboBox<>();
        btnUpdate = new javax.swing.JButton();
        txtApptFeedback = new javax.swing.JTextField();
        txtpaymentAmount = new javax.swing.JTextField();
        lblApptDate = new javax.swing.JLabel();
        lblTotalAmount = new javax.swing.JLabel();
        lblAppliance = new javax.swing.JLabel();
        btnReset = new javax.swing.JButton();
        lblCustomerName = new javax.swing.JLabel();
        lblApptTime = new javax.swing.JLabel();
        lblPaymentAmount = new javax.swing.JLabel();
        lblPaymenDate = new javax.swing.JLabel();
        lblPaymentStatus = new javax.swing.JLabel();
        lblFeedback = new javax.swing.JLabel();

        lblTitle.setBackground(new java.awt.Color(68, 68, 68));
        lblTitle.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(218, 0, 55));
        lblTitle.setText("User Profile");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlHandleTask.setBackground(new java.awt.Color(68, 68, 68));

        lblPageTitle.setBackground(new java.awt.Color(68, 68, 68));
        lblPageTitle.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        lblPageTitle.setForeground(new java.awt.Color(218, 0, 55));
        lblPageTitle.setText("Handle Task");

        cmbApptID.setBackground(new java.awt.Color(68, 68, 68));
        cmbApptID.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        cmbApptID.setForeground(new java.awt.Color(237, 237, 237));
        cmbApptID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Appointment ID" }));
        cmbApptID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbApptIDActionPerformed(evt);
            }
        });

        txtApptDate.setEditable(false);
        txtApptDate.setBackground(new java.awt.Color(68, 68, 68));
        txtApptDate.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtApptDate.setForeground(new java.awt.Color(237, 237, 237));
        txtApptDate.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));

        lblApptID.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblApptID.setText("Appointment ID:");

        txtCustomerName.setEditable(false);
        txtCustomerName.setBackground(new java.awt.Color(68, 68, 68));
        txtCustomerName.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtCustomerName.setForeground(new java.awt.Color(237, 237, 237));
        txtCustomerName.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));

        txtAppliance.setEditable(false);
        txtAppliance.setBackground(new java.awt.Color(68, 68, 68));
        txtAppliance.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtAppliance.setForeground(new java.awt.Color(237, 237, 237));
        txtAppliance.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));

        txtApptTime.setEditable(false);
        txtApptTime.setBackground(new java.awt.Color(68, 68, 68));
        txtApptTime.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtApptTime.setForeground(new java.awt.Color(237, 237, 237));
        txtApptTime.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));

        txttotalAmount.setBackground(new java.awt.Color(68, 68, 68));
        txttotalAmount.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txttotalAmount.setForeground(new java.awt.Color(237, 237, 237));
        txttotalAmount.setText("MYR");
        txttotalAmount.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));
        txttotalAmount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txttotalAmountFocusLost(evt);
            }
        });

        txtPaymentDate.setEditable(false);
        txtPaymentDate.setBackground(new java.awt.Color(68, 68, 68));
        txtPaymentDate.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtPaymentDate.setForeground(new java.awt.Color(237, 237, 237));
        txtPaymentDate.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));

        cmbPaymentStatus.setBackground(new java.awt.Color(68, 68, 68));
        cmbPaymentStatus.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        cmbPaymentStatus.setForeground(new java.awt.Color(237, 237, 237));
        cmbPaymentStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Payment Status", "Unpaid", "Paid" }));
        cmbPaymentStatus.setToolTipText("Payment Status of the Task");

        btnUpdate.setBackground(new java.awt.Color(23, 23, 23));
        btnUpdate.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(237, 237, 237));
        btnUpdate.setText("Pay ");
        btnUpdate.setBorder(null);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        txtApptFeedback.setBackground(new java.awt.Color(68, 68, 68));
        txtApptFeedback.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtApptFeedback.setForeground(new java.awt.Color(237, 237, 237));
        txtApptFeedback.setToolTipText("Customer Feedback");
        txtApptFeedback.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));

        txtpaymentAmount.setBackground(new java.awt.Color(68, 68, 68));
        txtpaymentAmount.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtpaymentAmount.setForeground(new java.awt.Color(237, 237, 237));
        txtpaymentAmount.setText("MYR");
        txtpaymentAmount.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));
        txtpaymentAmount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtpaymentAmountFocusLost(evt);
            }
        });

        lblApptDate.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblApptDate.setText("Appointment Date:");

        lblTotalAmount.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblTotalAmount.setText("Total Amount:");

        lblAppliance.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblAppliance.setText("Appliance:");

        btnReset.setBackground(new java.awt.Color(23, 23, 23));
        btnReset.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnReset.setForeground(new java.awt.Color(237, 237, 237));
        btnReset.setText("Reset");
        btnReset.setToolTipText("Button to reset every fields");
        btnReset.setBorder(null);
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        lblCustomerName.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblCustomerName.setText("Customer Name:");

        lblApptTime.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblApptTime.setText("Appointment Time:");

        lblPaymentAmount.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblPaymentAmount.setText("Payment Amount:");

        lblPaymenDate.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblPaymenDate.setText("Payment Date:");

        lblPaymentStatus.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblPaymentStatus.setText("Payment Status:");

        lblFeedback.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblFeedback.setText("Feedback:");

        javax.swing.GroupLayout pnlHandleTaskLayout = new javax.swing.GroupLayout(pnlHandleTask);
        pnlHandleTask.setLayout(pnlHandleTaskLayout);
        pnlHandleTaskLayout.setHorizontalGroup(
            pnlHandleTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHandleTaskLayout.createSequentialGroup()
                .addGap(496, 496, 496)
                .addComponent(lblPageTitle))
            .addGroup(pnlHandleTaskLayout.createSequentialGroup()
                .addGap(226, 226, 226)
                .addComponent(lblApptID)
                .addGap(250, 250, 250)
                .addComponent(lblApptDate))
            .addGroup(pnlHandleTaskLayout.createSequentialGroup()
                .addGap(226, 226, 226)
                .addComponent(cmbApptID, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(116, 116, 116)
                .addComponent(txtApptDate, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(pnlHandleTaskLayout.createSequentialGroup()
                .addGap(226, 226, 226)
                .addComponent(lblCustomerName)
                .addGap(242, 242, 242)
                .addComponent(lblAppliance))
            .addGroup(pnlHandleTaskLayout.createSequentialGroup()
                .addGap(226, 226, 226)
                .addComponent(txtCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(116, 116, 116)
                .addComponent(txtAppliance, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(pnlHandleTaskLayout.createSequentialGroup()
                .addGap(226, 226, 226)
                .addComponent(lblApptTime)
                .addGap(227, 227, 227)
                .addComponent(lblPaymenDate))
            .addGroup(pnlHandleTaskLayout.createSequentialGroup()
                .addGap(226, 226, 226)
                .addComponent(txtApptTime, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(116, 116, 116)
                .addComponent(txtPaymentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(pnlHandleTaskLayout.createSequentialGroup()
                .addGap(226, 226, 226)
                .addComponent(lblTotalAmount)
                .addGap(263, 263, 263)
                .addComponent(lblPaymentAmount))
            .addGroup(pnlHandleTaskLayout.createSequentialGroup()
                .addGap(226, 226, 226)
                .addComponent(txttotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(117, 117, 117)
                .addComponent(txtpaymentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(pnlHandleTaskLayout.createSequentialGroup()
                .addGap(230, 230, 230)
                .addComponent(lblPaymentStatus)
                .addGap(239, 239, 239)
                .addComponent(lblFeedback))
            .addGroup(pnlHandleTaskLayout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addComponent(cmbPaymentStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(120, 120, 120)
                .addComponent(txtApptFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(pnlHandleTaskLayout.createSequentialGroup()
                .addGap(357, 357, 357)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(140, 140, 140)
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlHandleTaskLayout.setVerticalGroup(
            pnlHandleTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHandleTaskLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(lblPageTitle)
                .addGap(41, 41, 41)
                .addGroup(pnlHandleTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblApptID)
                    .addComponent(lblApptDate))
                .addGap(12, 12, 12)
                .addGroup(pnlHandleTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbApptID, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlHandleTaskLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(txtApptDate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41)
                .addGroup(pnlHandleTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCustomerName)
                    .addComponent(lblAppliance))
                .addGap(6, 6, 6)
                .addGroup(pnlHandleTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAppliance, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(pnlHandleTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblApptTime)
                    .addComponent(lblPaymenDate))
                .addGap(6, 6, 6)
                .addGroup(pnlHandleTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtApptTime, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPaymentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(pnlHandleTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTotalAmount)
                    .addComponent(lblPaymentAmount))
                .addGap(18, 18, 18)
                .addGroup(pnlHandleTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txttotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtpaymentAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(pnlHandleTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPaymentStatus)
                    .addComponent(lblFeedback))
                .addGap(18, 18, 18)
                .addGroup(pnlHandleTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbPaymentStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtApptFeedback, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(pnlHandleTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlHandleTask, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlHandleTask, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // <editor-fold defaultstate="collapsed" desc="Methods">   
    
     private void loadUserProfile(){
        String[] matchedID = null;
        FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
        File usertext = new File(FileDir + "UserCache.txt");
        Scanner intUser;
        try {
            intUser = new Scanner(usertext);
            while (intUser.hasNext())
            {
             String bEntry = intUser.nextLine();
             matchedID = bEntry.split(":");
             techID = matchedID[0];
                }
            intUser.close();
        } catch (FileNotFoundException ex) {
            //Logger.getLogger(.class.getName()).log(Level.SEVERE, null, ex);
        }
    } 
     
    private void setAppointmentID(){
        // This is to ensure the entire method have access to borrow matchedID array
        String[] matchedID = null;
        ApptList = new DefaultComboBoxModel();       
        // Adding default text
        ApptList.addElement("Select Appointment ID");
        cmbApptID.setModel(ApptList);
        FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
        File appttxt = new File(FileDir + "Payment.txt");
        
        Scanner intAppt;
        try {
            // This part loads all book information
            intAppt = new Scanner(appttxt);
            // This is to increment the discovered client assignment index
            int i = 0;
            // Read lines from the file until no more are left.
            while (intAppt.hasNext())
            {
                // Read the next line.
                String bEntry = intAppt.nextLine();
                // Split the line by using the delimiterÂ ":" (semicolon) and store into array.
                matchedID = bEntry.split(":");
                 if ("true".equals(matchedID[12]) && matchedID[1].contains("APPT") && matchedID[2].equals(techID) && matchedID[7].equals("Unpaid")) {
                    matchedID[1] = matchedID[1].replace(apptPrefix, "");
                    ApptList.addElement(matchedID[1]);
                    i++;
                }

            }
            // OptionPane.showMessageDialog(null, i);
            intAppt.close();
            // Check if there are no clients at all for each type
            if (ApptList.getSize() == 1) {
                ApptList.removeAllElements();
                ApptList.addElement("No customer(s) available.");
            }
            // Attempt to list all fetched client ID into the list box
            cmbApptID.setModel(ApptList);
            // Select index 0 as default
            cmbApptID.setSelectedIndex(0);
        } catch (FileNotFoundException ex) {
            //Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     private void loadApptInfo(){
        // Assigning the cID to the selected index value
        ApptID = (String) cmbApptID.getSelectedItem();
        // This is to ensure the entire method have access to borrow matchedID array
        String[] matchedID = null;
        FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
        // For debugging purpose only
        // JOptionPane.showMessageDialog(null, bID);
        File appttxt = new File(FileDir + "Payment.txt");
        Scanner intAppt;
        try {
            // This part loads all book information
            intAppt = new Scanner(appttxt);
            // Read lines from the file until no more are left.
            while (intAppt.hasNext())
            {
                // Read the next line.
                String bEntry = intAppt.nextLine();
                // Split the line by using the delimiter ":" (semicolon) and store into array.
                matchedID = bEntry.split(":");
                matchedID[1] = matchedID[1].replace(apptPrefix, "");
                // JOptionPane.showMessageDialog(null, i);
                if (cmbApptID.getSelectedItem().equals(matchedID[1])) {
                    paymentID = matchedID[0];
                    techID = matchedID[2];
                    txtCustomerName.setText(matchedID[3]);
                    txtApptDate.setText(matchedID[4]);
                    txtApptTime.setText(matchedID[5]);
                    txtAppliance.setText(matchedID[6]);
                    switch (matchedID[7]) {
                        case "Unpaid":
                            cmbPaymentStatus.setSelectedIndex(1);
                            break;
                        case "Paid":
                            cmbPaymentStatus.setSelectedIndex(2);
                            break;
                        default:
                            cmbPaymentStatus.setSelectedIndex(1);
                    }
//                    txtEmail.setText(matchedID[5]);
//                    txtDOB.setText(matchedID[6]);
//                    txtManagerID.setText(matchedID[7]);
                }
            }
            intAppt.close();
        } catch (FileNotFoundException ex) {
           // Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
      private void updatePayment(){
        // TODO add your handling code here:
        try {
            // Check if textfields are empty
            emptyFields();
            // To get directory  
            FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
            // To get the book ID
            ApptID = (String) cmbApptID.getSelectedItem();
            // To rename original book.txt to book.bak
            File paymentOri = new File(FileDir + "Payment.txt");
            File paymentBack = new File(FileDir + "PaymentBack.txt");
            // To check if clientBak.txt is present or not
            if (!paymentBack.exists()){
                paymentOri.createNewFile();
            }
            // This is for debugging only!
            // JOptionPane.showMessageDialog(null, "renamed");
            // This is to rename the existing book.txt to clientBak.txt
            paymentOri.renameTo(paymentBack);
            // This is to open, find and replace a specific book record
            // Requires temporary file to store current state
            // FileWriter to write into a new file called book.txt
            FileWriter cd = new FileWriter(FileDir + "Payment.txt"); 
            // PrintWriter to print into book.txt
            PrintWriter cdp = new PrintWriter(cd); 
            // This is to open and read clientBak.txt 
            File paymenttxt = new File(FileDir + "PaymentBack.txt");
            // This is to instantiate the file opened earlier
            Scanner inputFile = new Scanner(paymenttxt);
            // This array is to contain all lines
            String[] matchedID;
            // This is only for debugging!
            // boolean itWorked = false;
            // Read lines from the file until no more are left.
            while (inputFile.hasNext())
            {
                // This is for debugging only!
                // JOptionPane.showMessageDialog(null, "In loop");
                // Read the next line.
                String bEntry = inputFile.nextLine();
                // Split the line by using the delimiter ":" (semicolon) and store into array.
                matchedID = bEntry.split(":");
                // Check if the read line has current book ID
                if (matchedID[1].equals(apptPrefix + ApptID)) {
                    
                    totalAmount = Money.parse(txttotalAmount.getText());
                    paymentAmount = Money.parse(txtpaymentAmount.getText());
                    
                    if(paymentAmount.isLessThan(totalAmount)){
                        JOptionPane.showMessageDialog(null, "Total payment is not enough", "Payment failed", JOptionPane.ERROR_MESSAGE);
                    } else {
                        
                        if(cmbPaymentStatus.getSelectedIndex() <= 1){
                            JOptionPane.showMessageDialog(null, "Payment status was not set to paid, autoset it to Paid", "Payment Status unselected!", JOptionPane.ERROR_MESSAGE);
                            cmbPaymentStatus.setSelectedIndex(2);
                        }
                        
                        balanceAmount = paymentAmount.minus(totalAmount);
                        matchedID[0] = paymentID;
                        matchedID[2] = techID;
                        matchedID[3] = txtCustomerName.getText();
                        matchedID[4] = txtApptDate.getText();
                        matchedID[5] = txtApptTime.getText();
                        matchedID[6] = txtAppliance.getText(); 
                        matchedID[7] = (String) cmbPaymentStatus.getSelectedItem();
                        matchedID[8] = txtPaymentDate.getText();
                        matchedID[9] = totalAmount.toString();
                        matchedID[10] = paymentAmount.toString();
                        matchedID[11] = balanceAmount.toString();
                        matchedID[12] = "true";
                        
                         cdp.println(matchedID[0] + ":"
                          + matchedID[1] + ":"
                          + matchedID[2] + ":"
                          + matchedID[3] + ":"
                          + matchedID[4] + ":"
                          + matchedID[5] + ":"
                          + matchedID[6] + ":"
                          + matchedID[7] + ":"
                          + matchedID[8] + ":"
                          + matchedID[9] + ":"
                          + matchedID[10] + ":"
                          + matchedID[11] + ":"
                          + matchedID[12]);
                
                         
                        JOptionPane.showMessageDialog(null, "Customer has paid for the service, balance is: " + balanceAmount, "Payment made", JOptionPane.INFORMATION_MESSAGE);
                    }
                    //JOptionPane.showMessageDialog(null, "Customer has paid for the service, balance is:RM" + balanceAmount, "Payment made", JOptionPane.INFORMATION_MESSAGE);
                    // Inserting the new information from the text fields into the book line
                   }
                // Rewrite the new book.txt with values found in clientBak.txt
                
            }
            // Close the clientBak.txt reader
            inputFile.close();
            // This deletes clientBak.txt
            paymentBack.delete();
            // This closes the book.txt printer 
            cdp.close();
        } catch (Exception ex) {
            highlightEmpty();
            JOptionPane.showMessageDialog(null, "Invalid input! Please check your input to proceed.", "Invalid insertion detected!", JOptionPane.ERROR_MESSAGE);
        }
    }
     private void feedbackIDIncrementor(){
        // This is to ensure the entire method have access to the matchedID array
        String[] matchedID = null;
        // This flag is to check if the while loop is triggered or not. Triggered while loop indicates presence of records but relevance might not
        boolean hasRecord = false;
        
        try {
            FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
            // For debugging purpose only
            // JOptionPane.showMessageDialog(null, bID);
            File feedbacktxt = new File(FileDir + "Feedback.txt");
            if (!feedbacktxt.exists()) {
                feedbacktxt.createNewFile();
            }
            Scanner inputFile;
            try {
                inputFile = new Scanner(feedbacktxt);
                // Read lines from the file until no more are left.
                while (inputFile.hasNext())
                {
                   // Read the next line.
                   String bEntry = inputFile.nextLine();
                   // Split the line by using the delimiterÂ ":" (semicolon) and store into array.
                   matchedID = bEntry.split(":");
                   String temptype = null;
//                   if (matchedID[0].contains("STA")) {
//                       temptype = "STA";
//                   } else if (matchedID[0].contains("STU")) {
//                       temptype = "STU";
//                   }
                   matchedID[0] = matchedID[0].replace(feedPrefix, "");
                   hasRecord = true;
                }
                inputFile.close();
                if (!hasRecord) {
                    newFeedID = 1;
                } else {
                    newFeedID = Integer.parseInt(matchedID[0]) + 1;
                }
            } catch (FileNotFoundException ex) {
                //Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
            JOptionPane.showMessageDialog(null, "Invalid input! Customer can only consist of numbers", "Invalid input type!", JOptionPane.ERROR_MESSAGE);
        }
    }  
    private void insertFeedback(){
        // Declaring file extension used
        String apptPrefix = "APPT";
        FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
        // Formatting ID into formal 6-digit mask
        DecimalFormat dc = new DecimalFormat("00000");
        try {
            emptyFields();
            // Fetching IDs from the textfields
            feedID = dc.format(newFeedID);
            String appointment_ID = (String) cmbApptID.getSelectedItem();
            //String TechID = txtTechID.getText();
            String paymentStatus = (String) cmbPaymentStatus.getSelectedItem();
            String apptFeedback =txtApptFeedback.getText();
            //String CustGender = (String) cmbGender.getSelectedItem();
            //String CustEmail = txtEmail.getText();
           // String CustDOB = txtDOB.getText();
            // FileWriter and PrintWriter to create and write into book.txt
            try {
                // FileWriter to write into a new file called client.txt
                FileWriter cd = new FileWriter(FileDir + "Feedback.txt", true); 
                // PrintWriter to print into client.txt
                PrintWriter cdp = new PrintWriter(cd); 
                // To print the line into Borrowing textfile
                cdp.println(feedPrefix + feedID + ":" +
                            apptPrefix + appointment_ID + ":" +
                            techID + ":" +
                            paymentStatus + ":" +
                            apptFeedback + ":" + 
                            "true"); //true boolean indicating the user is exisiting (non-deleted)
                
                cdp.close();
                cd.close();
                // To display completed borrowing process status
                //JOptionPane.showMessageDialog(null, "Client is successfully added! Press OK to return to client management form.", "Adding client succeeded!", JOptionPane.INFORMATION_MESSAGE);
                // To refresh new ID 
                feedbackIDIncrementor();
                setAppointmentID();
                clearPayment();
                // JOptionPane.showMessageDialog(null, newClientID);
                // To reload the client information
                // Integrate the reload part with combo box implementation of Client ID
                //setCustomerID();
                // Refresh the currently displayed client with the latest ID
                //cmbCustID.setSelectedIndex(cmbCustID.getItemCount() - 1);
            } catch (IOException ex) {
                //Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        catch (Exception ex) {
            highlightEmpty();
            // Continue with displaying which field was affected. ensure it appears before the mnessagebox
        }      
    }
    
    private void setCurrentDate(){
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH.mm.ss, dd-MM-yyyy");
        LocalDateTime now = LocalDateTime.now();
        txtPaymentDate.setText(dtf.format(now));
    }
    
     private void clearCache(){
        try {  
            FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
            File cache = new File(FileDir + "UserCache.txt");
            if (cache.exists()) {
                cache.delete();
            }
        } catch (Exception ex) {
            
        }
    }
     private void clearPayment(){
         cmbApptID.setSelectedIndex(0);
         txtApptDate.setText("");
         txtCustomerName.setText("");
         txtAppliance.setText("");
         txtApptTime.setText("");
         txtPaymentDate.setText("");
         txttotalAmount.setText("MYR");
         txtpaymentAmount.setText("MYR");
         txtApptFeedback.setText("");
         cmbPaymentStatus.setSelectedIndex(1);
     }
     private void emptyFields() throws Exception {
        PaymentValidation vd = new PaymentValidation();
        if ("".equals(txtApptDate.getText())) {
            throw new Exception("Empty appt date");
        }
        if ("".equals(txtCustomerName.getText())) {
            throw new Exception("Empty customer name");
        }
        if ("".equals(txtAppliance.getText())) {
            throw new Exception("Empty appliance");
        }
        if("".equals(txtApptTime.getText())){
            throw new Exception("Empty appt time");
        }
        if ("".equals(txtPaymentDate.getText())) {
            throw new Exception("Empty payment date");
        }
        if ("".equals(txttotalAmount.getText()) || "MYR".equals(txttotalAmount.getText())) {
            throw new Exception("Empty total amount");
        }
        if ("".equals(txtpaymentAmount.getText()) || "MYR".equals(txtpaymentAmount.getText())) {
            throw new Exception("Empty payment amount");
        }
        if ("".equals(txtApptFeedback.getText())) {
            throw new Exception("Empty customer feedback");
        }
        if (cmbApptID.getSelectedIndex() < 1) {
            throw new Exception("Empty appt ID");
        }
         if (cmbPaymentStatus.getSelectedIndex() < 1) {
            throw new Exception("Not selected payment status");
        }
       
    }
     private void highlightEmpty() {
        if ("".equals(txtApptDate.getText())) {
            lblApptDate.setForeground(Color.RED);
        }
        if ("".equals(txtCustomerName.getText())) {
            lblCustomerName.setForeground(Color.RED);
        }
        if ("".equals(txtAppliance.getText())) {
            lblAppliance.setForeground(Color.RED);
        }
        if ("".equals(txtApptTime.getText())) {
            lblApptTime.setForeground(Color.RED);
        }
        if ("".equals(txtPaymentDate.getText())) {
            lblPaymenDate.setForeground(Color.RED);
        }
        if ("".equals(txttotalAmount.getText()) || "MYR".equals(txttotalAmount.getText())) {
            lblTotalAmount.setForeground(Color.RED);
        }
        if ("".equals(txtpaymentAmount.getText()) || "MYR".equals(txtpaymentAmount.getText())) {
            lblPaymentAmount.setForeground(Color.RED);
        }
        if ("".equals(txtApptFeedback.getText())) {
            lblFeedback.setForeground(Color.RED);
        }
        if (cmbApptID.getSelectedIndex() < 1) {
            lblApptID.setForeground(Color.RED);
        }   
        if (cmbPaymentStatus.getSelectedIndex() < 1) {
            lblPaymentStatus.setForeground(Color.RED);
        }
    }
      private void deHighlightEmpty(){
        lblApptDate.setForeground(ogtxt);
        lblCustomerName.setForeground(ogtxt);
        lblAppliance.setForeground(ogtxt);
        lblApptTime.setForeground(ogtxt);
        lblPaymenDate.setForeground(ogtxt);
        lblTotalAmount.setForeground(ogtxt);
        lblPaymentAmount.setForeground(ogtxt);
        lblFeedback.setForeground(ogtxt);
        lblApptID.setForeground(ogtxt);
        lblPaymentStatus.setForeground(ogtxt); 
    }
     
     private void initForm(){
        this.setSize(1170,750);
        this.setLocation(600,150);
       btnUpdate.setEnabled(false);
        loadUserProfile();
        setAppointmentID();
        setCurrentDate();
        feedbackIDIncrementor();
        // Set the initial value for new book
        // This anon class handles window closing event
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e){
                int selection = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Closing Window", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (selection == JOptionPane.YES_OPTION) {
                    clearCache();
                    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                } else {
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                }
            }
        });
       // txaHomeAddress.getDocument().putProperty("filterNewlines", Boolean.TRUE);
      //  inputCharacterValidation();
     }
    // </editor-fold>
    
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
       deHighlightEmpty();
       updatePayment();
       insertFeedback();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void cmbApptIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbApptIDActionPerformed
        // TODO add your handling code here:
       // clearUser();
        if (cmbApptID.getSelectedIndex() > 0) {
            loadApptInfo();
           btnUpdate.setEnabled(true);
            
        } else {
           btnUpdate.setEnabled(false);
        }
        
    }//GEN-LAST:event_cmbApptIDActionPerformed

    private void txttotalAmountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txttotalAmountFocusLost
        // TODO add your handling code here:
        PaymentValidation vd = new PaymentValidation();     
        vd.runValidate(txttotalAmount, true);
    }//GEN-LAST:event_txttotalAmountFocusLost

    private void txtpaymentAmountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtpaymentAmountFocusLost
        // TODO add your handling code here:
        PaymentValidation vd = new PaymentValidation();     
        vd.runValidate(txtpaymentAmount, true);
    }//GEN-LAST:event_txtpaymentAmountFocusLost

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        clearPayment();
    }//GEN-LAST:event_btnResetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (Exception ex) {
            System.err.println("Fail Look and Feel");
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new APUHandleTask().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbApptID;
    private javax.swing.JComboBox<String> cmbPaymentStatus;
    private javax.swing.JLabel lblAppliance;
    private javax.swing.JLabel lblApptDate;
    private javax.swing.JLabel lblApptID;
    private javax.swing.JLabel lblApptTime;
    private javax.swing.JLabel lblCustomerName;
    private javax.swing.JLabel lblFeedback;
    private javax.swing.JLabel lblPageTitle;
    private javax.swing.JLabel lblPaymenDate;
    private javax.swing.JLabel lblPaymentAmount;
    private javax.swing.JLabel lblPaymentStatus;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTotalAmount;
    private javax.swing.JPanel pnlHandleTask;
    private javax.swing.JTextField txtAppliance;
    private javax.swing.JTextField txtApptDate;
    private javax.swing.JTextField txtApptFeedback;
    private javax.swing.JTextField txtApptTime;
    private javax.swing.JTextField txtCustomerName;
    private javax.swing.JTextField txtPaymentDate;
    private javax.swing.JTextField txtpaymentAmount;
    private javax.swing.JTextField txttotalAmount;
    // End of variables declaration//GEN-END:variables
}
