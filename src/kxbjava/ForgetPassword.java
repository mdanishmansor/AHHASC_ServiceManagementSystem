/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kxbjava;

import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Scanner;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;

/**
 *
 * @author User
 */
public class ForgetPassword extends javax.swing.JFrame {

    private String FileDir, userID, managerID, userRole, fullName, userEmail, username, phoneNumber, Gender, flag;
    private final Color ogtxt = new Color(237, 237, 237);

    /**
     * Creates new form APUProvideFeedback
     */
    public ForgetPassword() {
        initComponents();
        initForm();
    }

    private void setLogo() {
        String sourcefolder = System.getProperty("user.dir") + "\\src\\icons\\";
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(sourcefolder + "AHHASCrsmol.png"));
        this.setTitle("AHHASC Forgor Password Page");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPnl = new javax.swing.JPanel();
        txtUserID = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtConfirmPass = new javax.swing.JPasswordField();
        txtNewPass = new javax.swing.JPasswordField();
        lblNewPass = new javax.swing.JLabel();
        lblUserID = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        btnPnl = new javax.swing.JPanel();
        btnSubmit = new javax.swing.JButton();
        btnback = new javax.swing.JButton();
        lblTitle1 = new javax.swing.JLabel();
        lblConfirmPass = new javax.swing.JLabel();
        lblDesc = new javax.swing.JLabel();
        iconNoSee = new javax.swing.JLabel();
        iconSee = new javax.swing.JLabel();
        chkpass = new javax.swing.JCheckBox();
        iconNoSee1 = new javax.swing.JLabel();
        iconSee1 = new javax.swing.JLabel();
        chkpass1 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mainPnl.setBackground(new java.awt.Color(68, 68, 68));
        mainPnl.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtUserID.setBackground(new java.awt.Color(68, 68, 68));
        txtUserID.setFont(new java.awt.Font("Segoe UI Variable", 0, 18)); // NOI18N
        txtUserID.setForeground(new java.awt.Color(255, 255, 255));
        txtUserID.setToolTipText("User ID");
        txtUserID.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));
        mainPnl.add(txtUserID, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 160, 700, 80));

        txtEmail.setBackground(new java.awt.Color(68, 68, 68));
        txtEmail.setFont(new java.awt.Font("Segoe UI Variable", 0, 18)); // NOI18N
        txtEmail.setForeground(new java.awt.Color(255, 255, 255));
        txtEmail.setToolTipText("User Email");
        txtEmail.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));
        txtEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmailFocusLost(evt);
            }
        });
        mainPnl.add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 270, 700, 80));

        txtConfirmPass.setBackground(new java.awt.Color(68, 68, 68));
        txtConfirmPass.setFont(new java.awt.Font("Segoe UI Variable", 0, 18)); // NOI18N
        txtConfirmPass.setForeground(new java.awt.Color(255, 255, 255));
        txtConfirmPass.setToolTipText("Confirm Password");
        txtConfirmPass.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));
        txtConfirmPass.setCaretColor(new java.awt.Color(237, 237, 237));
        mainPnl.add(txtConfirmPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 390, 700, 80));

        txtNewPass.setBackground(new java.awt.Color(68, 68, 68));
        txtNewPass.setFont(new java.awt.Font("Segoe UI Variable", 0, 18)); // NOI18N
        txtNewPass.setForeground(new java.awt.Color(255, 255, 255));
        txtNewPass.setToolTipText("User Password");
        txtNewPass.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));
        txtNewPass.setCaretColor(new java.awt.Color(237, 237, 237));
        mainPnl.add(txtNewPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 510, 700, 80));

        lblNewPass.setFont(new java.awt.Font("Segoe UI Variable", 0, 24)); // NOI18N
        lblNewPass.setForeground(new java.awt.Color(255, 255, 255));
        lblNewPass.setText("New Password");
        mainPnl.add(lblNewPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 360, -1, -1));

        lblUserID.setFont(new java.awt.Font("Segoe UI Variable", 0, 24)); // NOI18N
        lblUserID.setForeground(new java.awt.Color(255, 255, 255));
        lblUserID.setText("User ID");
        mainPnl.add(lblUserID, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 130, -1, -1));

        lblEmail.setFont(new java.awt.Font("Segoe UI Variable", 0, 24)); // NOI18N
        lblEmail.setForeground(new java.awt.Color(255, 255, 255));
        lblEmail.setText("Email");
        mainPnl.add(lblEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 240, -1, -1));

        btnPnl.setBackground(new java.awt.Color(68, 68, 68));

        btnSubmit.setBackground(new java.awt.Color(68, 68, 68));
        btnSubmit.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnSubmit.setForeground(new java.awt.Color(237, 237, 237));
        btnSubmit.setText("Submit");
        btnSubmit.setToolTipText("Button to reset every fields");
        btnSubmit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnSubmit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnback.setBackground(new java.awt.Color(68, 68, 68));
        btnback.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnback.setForeground(new java.awt.Color(255, 255, 255));
        btnback.setText("Back");
        btnback.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnback.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout btnPnlLayout = new javax.swing.GroupLayout(btnPnl);
        btnPnl.setLayout(btnPnlLayout);
        btnPnlLayout.setHorizontalGroup(
            btnPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnPnlLayout.createSequentialGroup()
                .addContainerGap(793, Short.MAX_VALUE)
                .addComponent(btnback, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );
        btnPnlLayout.setVerticalGroup(
            btnPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btnPnlLayout.createSequentialGroup()
                .addContainerGap(7, Short.MAX_VALUE)
                .addGroup(btnPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnback, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        mainPnl.add(btnPnl, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 620, 1280, 100));

        lblTitle1.setBackground(new java.awt.Color(68, 68, 68));
        lblTitle1.setFont(new java.awt.Font("Segoe UI Variable", 1, 38)); // NOI18N
        lblTitle1.setForeground(new java.awt.Color(214, 41, 99));
        lblTitle1.setText("Reset Password ");
        mainPnl.add(lblTitle1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, -1, -1));

        lblConfirmPass.setFont(new java.awt.Font("Segoe UI Variable", 0, 24)); // NOI18N
        lblConfirmPass.setForeground(new java.awt.Color(255, 255, 255));
        lblConfirmPass.setText("Confirm Password");
        mainPnl.add(lblConfirmPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 480, -1, -1));

        lblDesc.setBackground(new java.awt.Color(68, 68, 68));
        lblDesc.setFont(new java.awt.Font("Segoe UI Variable", 1, 24)); // NOI18N
        lblDesc.setForeground(new java.awt.Color(255, 255, 255));
        lblDesc.setText("Please Provide Your User ID and Email to Reset Your Password");
        mainPnl.add(lblDesc, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, -1, -1));

        iconNoSee.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/nosee.png"))); // NOI18N
        iconNoSee.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        iconNoSee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                iconNoSeeMousePressed(evt);
            }
        });
        mainPnl.add(iconNoSee, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 530, 40, 40));

        iconSee.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/see.png"))); // NOI18N
        iconSee.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        iconSee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                iconSeeMousePressed(evt);
            }
        });
        mainPnl.add(iconSee, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 530, 40, 40));

        chkpass.setFocusable(false);
        chkpass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkpassActionPerformed(evt);
            }
        });
        mainPnl.add(chkpass, new org.netbeans.lib.awtextra.AbsoluteConstraints(1260, 10, -1, -1));

        iconNoSee1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/nosee.png"))); // NOI18N
        iconNoSee1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        iconNoSee1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                iconNoSee1MousePressed(evt);
            }
        });
        mainPnl.add(iconNoSee1, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 410, 40, 40));

        iconSee1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/see.png"))); // NOI18N
        iconSee1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        iconSee1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                iconSee1MousePressed(evt);
            }
        });
        mainPnl.add(iconSee1, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 410, 40, 40));

        chkpass1.setFocusable(false);
        chkpass1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkpass1ActionPerformed(evt);
            }
        });
        mainPnl.add(chkpass1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1260, 30, -1, -1));

        getContentPane().add(mainPnl, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1280, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadUserProfile() {
        String[] matchedID = null;
        FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
        File usertext = new File(FileDir + "UserProfile.txt");
        Scanner intUser;
        try {
            intUser = new Scanner(usertext);
            while (intUser.hasNext()) {
                String bEntry = intUser.nextLine();
                matchedID = bEntry.split(":");

                if (matchedID[0].equals(txtUserID.getText()) && matchedID[4].equals(txtEmail.getText())) {
                    userID = matchedID[0];
                    managerID = matchedID[1];
                    userRole = matchedID[2];
                    fullName = matchedID[3];
                    userEmail = matchedID[4];
                    username = matchedID[5];
                    matchedID[6] = String.valueOf(txtNewPass.getPassword());
                    phoneNumber = matchedID[7];
                    Gender = matchedID[8];
                    matchedID[9] = "true";
                }
            }
            intUser.close();
        } catch (FileNotFoundException ex) {
            //Logger.getLogger(.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean similarPassword() {
        boolean isSimilar = false;
        String currentPass = String.valueOf(txtNewPass.getPassword());
        String comparePass = String.valueOf(txtConfirmPass.getPassword());
        if ("".equals(currentPass) || "".equals(comparePass)) {
            isSimilar = false;
        } else if (currentPass.equals(comparePass)) {
            isSimilar = true;
        }
        return isSimilar;
    }

    private void updatePassword() {
        // TODO add your handling code here:
        try {
            // Check if textfields are empty
            emptyFields();
            if (!similarPassword()) {
                throw new Exception("Password mismatch");
            }
            // To get directory  
            FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
            // To get the book ID
            // To rename original book.txt to book.bak
            File userOri = new File(FileDir + "UserProfile.txt");
            File userBack = new File(FileDir + "UserProfileBack.txt");
            // To check if clientBak.txt is present or not
            if (!userBack.exists()) {
                userOri.createNewFile();
            }
            // This is for debugging only!
            // JOptionPane.showMessageDialog(null, "renamed");
            // This is to rename the existing book.txt to clientBak.txt
            userOri.renameTo(userBack);
            // This is to open, find and replace a specific book record
            // Requires temporary file to store current state
            // FileWriter to write into a new file called book.txt
            FileWriter cd = new FileWriter(FileDir + "UserProfile.txt");
            // PrintWriter to print into book.txt
            PrintWriter cdp = new PrintWriter(cd);
            // This is to open and read clientBak.txt 
            File usertxt = new File(FileDir + "UserProfileBack.txt");
            // This is to instantiate the file opened earlier
            Scanner inputFile = new Scanner(usertxt);
            // This array is to contain all lines
            String[] matchedID;
            // This is only for debugging!
            // boolean itWorked = false;
            // Read lines from the file until no more are left.
            boolean foundValue = false;

            if (similarPassword()) {

                while (inputFile.hasNext()) {
                    // This is for debugging only!
                    // JOptionPane.showMessageDialog(null, "In loop");
                    // Read the next line.
                    String bEntry = inputFile.nextLine();
                    // Split the line by using the delimiter ":" (semicolon) and store into array.
                    matchedID = bEntry.split(":");

                    if (matchedID[0].equals(txtUserID.getText()) && matchedID[4].equals(txtEmail.getText())) {

                        foundValue = true;
                        matchedID[1] = managerID;
                        matchedID[2] = userRole;
                        matchedID[3] = fullName;
                        matchedID[4] = userEmail;
                        matchedID[5] = username;
                        matchedID[6] = String.valueOf(txtNewPass.getPassword());
                        matchedID[7] = phoneNumber;
                        matchedID[8] = Gender;
                        matchedID[9] = flag;


                        JOptionPane.showMessageDialog(null, "Your password has been updated, you may login now.", "Password Updated!", JOptionPane.INFORMATION_MESSAGE);
                        new APULogin().setVisible(true);
                        this.dispose();
                    }
                    
                    cdp.println(matchedID[0] + ":"
                            + matchedID[1] + ":"
                            + matchedID[2] + ":"
                            + matchedID[3] + ":"
                            + matchedID[4] + ":"
                            + matchedID[5] + ":"
                            + matchedID[6] + ":"
                            + matchedID[7] + ":"
                            + matchedID[8] + ":"
                            + matchedID[9]);

                }
            } else {
                JOptionPane.showMessageDialog(null, "Password is not matching!", "Password mismatch!", JOptionPane.WARNING_MESSAGE);
            }

            if (!foundValue) {
                JOptionPane.showMessageDialog(null, "Invalid User ID or Email.", "Record not found!", JOptionPane.WARNING_MESSAGE);
            }
            // Close the clientBak.txt reader
            inputFile.close();
            // This deletes clientBak.txt
            userBack.delete();
            // This closes the book.txt printer 
            cdp.close();

            //loadCustomerInfo();
        } catch (Exception ex) {
            highlightEmpty();
            System.out.println(ex);
            if (!similarPassword()) {
                JOptionPane.showMessageDialog(null, "Password is not matching!", "Password mismatch!", JOptionPane.WARNING_MESSAGE);
            }
            JOptionPane.showMessageDialog(null, "Invalid input! Please check your input to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
            // Continue with displaying which field was affected. ensure it appears before the mnessagebox
        }
    }

    private void emptyFields() throws Exception {
        EmailValidation vd = new EmailValidation();
        if ("".equals(txtUserID.getText())) {
            throw new Exception("Empty user ID");
        }
        if ("".equals(txtNewPass.getPassword())) {
            throw new Exception("Empty new password");
        }
        if ("".equals(txtConfirmPass.getPassword())) {
            throw new Exception("Empty new password");
        }
        if ("".equals(txtEmail.getText())) {
            throw new Exception("Empty new email");
        }
        if (vd.runValidate(txtEmail, false)) {
            throw new Exception("Invalid email address format");
        }
    }

    private void highlightEmpty() {
        if ("".equals(txtUserID.getText())) {
            lblUserID.setForeground(Color.RED);
        }
        if ("".equals(String.valueOf(txtNewPass.getPassword()))) {
            lblNewPass.setForeground(Color.RED);
        }
        if ("".equals(String.valueOf(txtConfirmPass.getPassword()))) {
            lblConfirmPass.setForeground(Color.RED);
        }
        if ("".equals(txtEmail.getText())) {
            lblEmail.setForeground(Color.RED);
        }
    }

    private void deHighlightEmpty() {
        lblUserID.setForeground(ogtxt);
        lblEmail.setForeground(ogtxt);
        lblNewPass.setForeground(ogtxt);
        lblConfirmPass.setForeground(ogtxt);

    }

    private void inputCharacterValidation(){
        txtNewPass.getDocument().addDocumentListener(new APUDocumentListener() {
            PasswordValidation vd = new PasswordValidation();
            @Override
            public void changedUpdate(DocumentEvent e){
                vd.runValidate(txtNewPass);

            }
            @Override
            public void insertUpdate(DocumentEvent e) {
                vd.runValidate(txtNewPass);
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                vd.runValidate(txtNewPass);
            }

        });
        txtConfirmPass.getDocument().addDocumentListener(new APUDocumentListener() {
            PasswordValidation vd = new PasswordValidation();
            @Override
            public void changedUpdate(DocumentEvent e){
                vd.runValidate(txtConfirmPass);
            }
            @Override
            public void insertUpdate(DocumentEvent e) {
                vd.runValidate(txtConfirmPass);
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                vd.runValidate(txtConfirmPass);
            }
        });
        txtUserID.getDocument().addDocumentListener(new APUDocumentListener() {
            UserIDValidation vd = new UserIDValidation();
            @Override
            public void changedUpdate(DocumentEvent e){
                vd.runValidate(txtUserID);
            }
            @Override
            public void insertUpdate(DocumentEvent e) {
                vd.runValidate(txtUserID);
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                vd.runValidate(txtUserID);
            }
        });
    }

    private void txtEmailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmailFocusLost
        // TODO add your handling code here:
        EmailValidation vd = new EmailValidation();
        vd.runValidate(txtEmail, true);
    }//GEN-LAST:event_txtEmailFocusLost

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed

        deHighlightEmpty();
        loadUserProfile();
        updatePassword();
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbackActionPerformed
        new APULogin().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnbackActionPerformed

    private void iconNoSeeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconNoSeeMousePressed
        iconNoSee.setVisible(false);
        iconSee.setVisible(true);
        txtNewPass.setEchoChar('*');
    }//GEN-LAST:event_iconNoSeeMousePressed

    private void iconSeeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconSeeMousePressed
        iconNoSee.setVisible(true);
        iconSee.setVisible(false);
        txtNewPass.setEchoChar((char) 0);
    }//GEN-LAST:event_iconSeeMousePressed

    private void chkpassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkpassActionPerformed
        if (chkpass.isSelected()) {
            txtNewPass.setEchoChar((char) 0);
        } else {
            txtNewPass.setEchoChar('*');
        }
    }//GEN-LAST:event_chkpassActionPerformed

    private void iconNoSee1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconNoSee1MousePressed
        iconNoSee1.setVisible(false);
        iconSee1.setVisible(true);
        txtConfirmPass.setEchoChar('*');
    }//GEN-LAST:event_iconNoSee1MousePressed

    private void iconSee1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iconSee1MousePressed
        iconNoSee1.setVisible(true);
        iconSee1.setVisible(false);
        txtConfirmPass.setEchoChar((char) 0);
    }//GEN-LAST:event_iconSee1MousePressed

    private void chkpass1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkpass1ActionPerformed
        if (chkpass1.isSelected()) {
            txtConfirmPass.setEchoChar((char) 0);
        } else {
            txtConfirmPass.setEchoChar('*');
        }
    }//GEN-LAST:event_chkpass1ActionPerformed

    private void clearCache() {
        try {
            FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
            File cache = new File(FileDir + "UserCache.txt");
            if (cache.exists()) {
                cache.delete();
            }
        } catch (Exception ex) {

        }
    }

    private void initForm() {
        this.setLocationRelativeTo(null);
        setLogo();
        this.chkpass.setSelected(true);
        this.chkpass.setVisible(false);
        this.iconNoSee.setVisible(false);
        this.txtNewPass.setEchoChar('*');
        this.chkpass1.setSelected(true);
        this.chkpass1.setVisible(false);
        this.iconNoSee1.setVisible(false);
        this.txtConfirmPass.setEchoChar('*');
        // Set the initial value for new book
        // This anon class handles window closing event
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                int selection = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Closing Window", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (selection == JOptionPane.YES_OPTION) {
                    clearCache();
                    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                } else {
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                }
            }
        });
        inputCharacterValidation();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (Exception ex) {
            System.err.println("Fail Look and Feel");
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ForgetPassword().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel btnPnl;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton btnback;
    private javax.swing.JCheckBox chkpass;
    private javax.swing.JCheckBox chkpass1;
    private javax.swing.JLabel iconNoSee;
    private javax.swing.JLabel iconNoSee1;
    private javax.swing.JLabel iconSee;
    private javax.swing.JLabel iconSee1;
    private javax.swing.JLabel lblConfirmPass;
    private javax.swing.JLabel lblDesc;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblNewPass;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JLabel lblUserID;
    private javax.swing.JPanel mainPnl;
    private javax.swing.JPasswordField txtConfirmPass;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JPasswordField txtNewPass;
    private javax.swing.JTextField txtUserID;
    // End of variables declaration//GEN-END:variables
}
