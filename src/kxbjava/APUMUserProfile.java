/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kxbjava;

import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;

/**
 *
 * @author User
 */
public class APUMUserProfile extends javax.swing.JFrame {

    int UserType;
    private String userSpecies, uID, FileDir, managerID;
    private int newUserID, userType;
    private DefaultComboBoxModel userList;
    private final Color ogtxt = new Color(237, 237, 237);

    /**
     * Creates new form APURegister
     */
    public APUMUserProfile() {
        initComponents();
        initForm();
        loadUserProfile();
        //getUserType();
        //setUserOption();
    }

    private void setLogo() {
        String sourcefolder = System.getProperty("user.dir") + "\\src\\icons\\";
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(sourcefolder + "AHHASCrsmol.png"));
        this.setTitle("AHHASC Manage User Profile Page");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnPnl = new javax.swing.JPanel();
        btnRegister = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblTitle1 = new javax.swing.JLabel();
        lblDesc = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lblManagerID = new javax.swing.JLabel();
        txtManagerID = new javax.swing.JTextField();
        lblGender = new javax.swing.JLabel();
        cmbGender = new javax.swing.JComboBox<>();
        lblFullName = new javax.swing.JLabel();
        txtFullName = new javax.swing.JTextField();
        lblPhoneNumber = new javax.swing.JLabel();
        txtPhoneNumber = new javax.swing.JFormattedTextField();
        jPanel3 = new javax.swing.JPanel();
        lblApptID2 = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        txtUsername = new javax.swing.JTextField();
        lblUsername = new javax.swing.JLabel();
        cmbUserType = new javax.swing.JComboBox<>();
        cmbUserID = new javax.swing.JComboBox<>();
        lblUserType = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(68, 68, 68));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnPnl.setBackground(new java.awt.Color(68, 68, 68));

        btnRegister.setBackground(new java.awt.Color(68, 68, 68));
        btnRegister.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnRegister.setForeground(new java.awt.Color(237, 237, 237));
        btnRegister.setText("Register");
        btnRegister.setToolTipText("Button to reset every fields");
        btnRegister.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnRegister.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(68, 68, 68));
        btnBack.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnBack.setForeground(new java.awt.Color(237, 237, 237));
        btnBack.setText("Back");
        btnBack.setToolTipText("Button to reset every fields");
        btnBack.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(68, 68, 68));
        btnUpdate.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(237, 237, 237));
        btnUpdate.setText("Update");
        btnUpdate.setToolTipText("Button to reset every fields");
        btnUpdate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(68, 68, 68));
        btnDelete.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(237, 237, 237));
        btnDelete.setText("Delete");
        btnDelete.setToolTipText("Button to reset every fields");
        btnDelete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout btnPnlLayout = new javax.swing.GroupLayout(btnPnl);
        btnPnl.setLayout(btnPnlLayout);
        btnPnlLayout.setHorizontalGroup(
            btnPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnPnlLayout.createSequentialGroup()
                .addContainerGap(317, Short.MAX_VALUE)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );
        btnPnlLayout.setVerticalGroup(
            btnPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btnPnlLayout.createSequentialGroup()
                .addContainerGap(7, Short.MAX_VALUE)
                .addGroup(btnPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        jPanel1.add(btnPnl, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 620, 1280, 100));

        lblTitle1.setBackground(new java.awt.Color(68, 68, 68));
        lblTitle1.setFont(new java.awt.Font("Segoe UI Variable", 1, 38)); // NOI18N
        lblTitle1.setForeground(new java.awt.Color(214, 41, 99));
        lblTitle1.setText("Manage User Profiles");
        jPanel1.add(lblTitle1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, -1, -1));

        lblDesc.setBackground(new java.awt.Color(68, 68, 68));
        lblDesc.setFont(new java.awt.Font("Segoe UI Variable", 1, 24)); // NOI18N
        lblDesc.setForeground(new java.awt.Color(255, 255, 255));
        lblDesc.setText("Register, Update or Delete a User");
        jPanel1.add(lblDesc, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, -1, -1));

        jPanel2.setBackground(new java.awt.Color(68, 68, 68));

        lblManagerID.setBackground(new java.awt.Color(68, 68, 68));
        lblManagerID.setFont(new java.awt.Font("Segoe UI Variable", 0, 24)); // NOI18N
        lblManagerID.setForeground(new java.awt.Color(237, 237, 237));
        lblManagerID.setText("Manager ID");

        txtManagerID.setEditable(false);
        txtManagerID.setBackground(new java.awt.Color(68, 68, 68));
        txtManagerID.setFont(new java.awt.Font("Segoe UI Variable", 0, 18)); // NOI18N
        txtManagerID.setForeground(new java.awt.Color(237, 237, 237));
        txtManagerID.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));

        lblGender.setBackground(new java.awt.Color(68, 68, 68));
        lblGender.setFont(new java.awt.Font("Segoe UI Variable", 0, 24)); // NOI18N
        lblGender.setForeground(new java.awt.Color(237, 237, 237));
        lblGender.setText("Gender");

        cmbGender.setBackground(new java.awt.Color(68, 68, 68));
        cmbGender.setFont(new java.awt.Font("Segoe UI Variable", 0, 18)); // NOI18N
        cmbGender.setForeground(new java.awt.Color(237, 237, 237));
        cmbGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Gender", "Male", "Female" }));
        cmbGender.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 0, new java.awt.Color(237, 237, 237)));
        cmbGender.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        lblFullName.setBackground(new java.awt.Color(68, 68, 68));
        lblFullName.setFont(new java.awt.Font("Segoe UI Variable", 0, 24)); // NOI18N
        lblFullName.setForeground(new java.awt.Color(237, 237, 237));
        lblFullName.setText("Full Name");

        txtFullName.setBackground(new java.awt.Color(68, 68, 68));
        txtFullName.setFont(new java.awt.Font("Segoe UI Variable", 0, 18)); // NOI18N
        txtFullName.setForeground(new java.awt.Color(237, 237, 237));
        txtFullName.setToolTipText("User's Full Name");
        txtFullName.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));

        lblPhoneNumber.setBackground(new java.awt.Color(68, 68, 68));
        lblPhoneNumber.setFont(new java.awt.Font("Segoe UI Variable", 0, 24)); // NOI18N
        lblPhoneNumber.setForeground(new java.awt.Color(237, 237, 237));
        lblPhoneNumber.setText("Phone Number");

        txtPhoneNumber.setBackground(new java.awt.Color(68, 68, 68));
        txtPhoneNumber.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(222, 222, 222)));
        try {
            txtPhoneNumber.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##########")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtPhoneNumber.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtPhoneNumber.setText("");
        txtPhoneNumber.setToolTipText("Customer Phone Number");
        txtPhoneNumber.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPhoneNumber)
                    .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFullName)
                    .addComponent(cmbGender, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGender)
                    .addComponent(txtManagerID, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblManagerID))
                .addContainerGap(163, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(lblManagerID)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtManagerID, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblGender)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbGender, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblFullName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblPhoneNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 124, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 150, 630, 470));

        jPanel3.setBackground(new java.awt.Color(68, 68, 68));

        lblApptID2.setFont(new java.awt.Font("Segoe UI Variable", 0, 24)); // NOI18N
        lblApptID2.setForeground(new java.awt.Color(255, 255, 255));
        lblApptID2.setText("User ID");

        lblPassword.setBackground(new java.awt.Color(68, 68, 68));
        lblPassword.setFont(new java.awt.Font("Segoe UI Variable", 0, 24)); // NOI18N
        lblPassword.setForeground(new java.awt.Color(237, 237, 237));
        lblPassword.setText("Password");

        txtPassword.setBackground(new java.awt.Color(68, 68, 68));
        txtPassword.setFont(new java.awt.Font("Segoe UI Variable", 0, 18)); // NOI18N
        txtPassword.setForeground(new java.awt.Color(237, 237, 237));
        txtPassword.setToolTipText("User Password");
        txtPassword.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));
        txtPassword.setCaretColor(new java.awt.Color(237, 237, 237));

        txtUsername.setBackground(new java.awt.Color(68, 68, 68));
        txtUsername.setFont(new java.awt.Font("Segoe UI Variable", 0, 18)); // NOI18N
        txtUsername.setForeground(new java.awt.Color(237, 237, 237));
        txtUsername.setToolTipText("User Username");
        txtUsername.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));

        lblUsername.setBackground(new java.awt.Color(68, 68, 68));
        lblUsername.setFont(new java.awt.Font("Segoe UI Variable", 0, 24)); // NOI18N
        lblUsername.setForeground(new java.awt.Color(237, 237, 237));
        lblUsername.setText("Username");

        cmbUserType.setBackground(new java.awt.Color(68, 68, 68));
        cmbUserType.setFont(new java.awt.Font("Segoe UI Variable", 0, 18)); // NOI18N
        cmbUserType.setForeground(new java.awt.Color(255, 255, 255));
        cmbUserType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select User Type", "Centre Manager", "Technician" }));
        cmbUserType.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(237, 237, 237)));
        cmbUserType.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cmbUserType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbUserTypeActionPerformed(evt);
            }
        });

        cmbUserID.setBackground(new java.awt.Color(68, 68, 68));
        cmbUserID.setFont(new java.awt.Font("Segoe UI Variable", 0, 18)); // NOI18N
        cmbUserID.setForeground(new java.awt.Color(255, 255, 255));
        cmbUserID.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select User ID" }));
        cmbUserID.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(237, 237, 237)));
        cmbUserID.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cmbUserID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbUserIDActionPerformed(evt);
            }
        });

        lblUserType.setBackground(new java.awt.Color(68, 68, 68));
        lblUserType.setFont(new java.awt.Font("Segoe UI Variable", 0, 24)); // NOI18N
        lblUserType.setForeground(new java.awt.Color(237, 237, 237));
        lblUserType.setText("User Type");

        lblEmail.setBackground(new java.awt.Color(68, 68, 68));
        lblEmail.setFont(new java.awt.Font("Segoe UI Variable", 0, 24)); // NOI18N
        lblEmail.setForeground(new java.awt.Color(237, 237, 237));
        lblEmail.setText("Email Address:");

        txtEmail.setBackground(new java.awt.Color(68, 68, 68));
        txtEmail.setFont(new java.awt.Font("Segoe UI Variable", 0, 18)); // NOI18N
        txtEmail.setForeground(new java.awt.Color(237, 237, 237));
        txtEmail.setToolTipText("User Email");
        txtEmail.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(237, 237, 237)));
        txtEmail.setCaretColor(new java.awt.Color(237, 237, 237));
        txtEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmailFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(224, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmail)
                    .addComponent(lblUserType)
                    .addComponent(cmbUserID, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbUserType, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUsername)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPassword)
                    .addComponent(lblApptID2))
                .addGap(46, 46, 46))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(lblUserType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbUserType, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblApptID2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbUserID, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblUsername)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(lblPassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEmail)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 630, 470));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // <editor-fold defaultstate="collapsed" desc="Methods">
    private boolean emailChecker() {
        // Assigning the lID to the selected index value
        String userTemp = txtEmail.getText();
        // This is to ensure the entire method have access to borrow matchedID array
        String[] matchedID = null;
        boolean notAvailable = false;
        FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
        // For debugging purpose only
        // JOptionPane.showMessageDialog(null, bID);
        File usertxt = new File(FileDir + "UserProfile.txt");
        Scanner intUser;
        try {
            if (!usertxt.exists()) {
                usertxt.createNewFile();
            }
            // This part loads all book information
            intUser = new Scanner(usertxt);
            // Read lines from the file until no more are left.
            while (intUser.hasNext()) {
                // Read the next line.
                String lEntry = intUser.nextLine();
                // Split the line by using the delimiter ":" (semicolon) and store into array.
                matchedID = lEntry.split(":");
                // matchedID[0] = matchedID[0].replace("LIB", "");
                // JOptionPane.showMessageDialog(null, i);
                if (userTemp.equals(matchedID[4])) {
                    notAvailable = true;
                }
            }
            intUser.close();
        } catch (Exception ex) {

        }
        return notAvailable;
    }

    private boolean usernameChecker() {
        // Assigning the lID to the selected index value
        String userTemp = txtUsername.getText();
        // This is to ensure the entire method have access to borrow matchedID array
        String[] matchedID = null;
        boolean noAvailable = false;
        FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
        // For debugging purpose only
        // JOptionPane.showMessageDialog(null, bID);
        File usertxt = new File(FileDir + "UserProfile.txt");
        Scanner intUser;
        try {
            if (!usertxt.exists()) {
                usertxt.createNewFile();
            }
            // This part loads all book information
            intUser = new Scanner(usertxt);
            // Read lines from the file until no more are left.
            while (intUser.hasNext()) {
                // Read the next line.
                String lEntry = intUser.nextLine();
                // Split the line by using the delimiter ":" (semicolon) and store into array.
                matchedID = lEntry.split(":");
                // matchedID[0] = matchedID[0].replace("LIB", "");
                // JOptionPane.showMessageDialog(null, i);
                if (userTemp.equals(matchedID[5])) {
                    noAvailable = true;
                }
            }
            intUser.close();
        } catch (Exception ex) {

        }
        return noAvailable;
    }

    private void loadUserProfile() {
        String[] matchedID = null;
        FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
        File usertext = new File(FileDir + "UserCache.txt");
        Scanner intUser;
        try {
            intUser = new Scanner(usertext);
            while (intUser.hasNext()) {
                String bEntry = intUser.nextLine();
                matchedID = bEntry.split(":");
                managerID = matchedID[0];
                txtManagerID.setText(managerID);
            }
            intUser.close();
        } catch (FileNotFoundException ex) {
            //Logger.getLogger(.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void getUserType() {
        userType = cmbUserType.getSelectedIndex(); // Get client type
        if (userType <= 0) { // Will disable the list from any user interaction
            //ultilblClientID.setText("Load Existing Client:");
            userSpecies = "NUL";
        } else { // Will display fields according to selected user type
            //DZClientIDLbl.setText("Load Existing " + DZClientCmbox.getSelectedItem().toString() + ":");
            switch (userType) {
                case 1:
                    userSpecies = "CM";
                    break;
                case 2:
                    userSpecies = "TC";
                    break;
                default:
                    userSpecies = "NUL";
                    break;
            }
        }
    }

    private void setUserOption() {
        // This is to ensure the entire method have access to borrow matchedID array
        String[] matchedID = null;
        userList = new DefaultComboBoxModel();
        String userLabel; // Declared to store title of the selected client type
        switch (userSpecies) {
            case "CM":
                userLabel = "Centre Manager";
                break;
            case "TC":
                userLabel = "Technician";
                break;
            default:
                userLabel = "Existing";
        }
        // Adding default text
        userList.addElement("Select " + userLabel + " ID");
        cmbUserID.setModel(userList);
        FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
        // For debugging purpose only
        // JOptionPane.showMessageDialog(null, bID);
        File usertxt = new File(FileDir + "UserProfile.txt");
        Scanner intUser;
        try {
            // This part loads all book information
            intUser = new Scanner(usertxt);
            // This is to increment the discovered client assignment index
            int i = 0;
            // Read lines from the file until no more are left.
            while (intUser.hasNext()) {
                // Read the next line.
                String bEntry = intUser.nextLine();
                // Split the line by using the delimiter ":" (semicolon) and store into array.
                matchedID = bEntry.split(":");
                String temptype = null;
                if (matchedID[0].contains("CM")) {
                    temptype = "CM";
                } else if (matchedID[0].contains("TC")) {
                    temptype = "TC";

                }
                // Get the digits out
                String preOut = matchedID[0].replace(temptype, "");
                // JOptionPane.showMessageDialog(null, preOut);
                // Replace the string part with empty digits, leaving only the prefix
                String numOut = matchedID[0].replace(preOut, "");
                // JOptionPane.showMessageDialog(null, numOut);
                if (i < 200) {
                    if ("true".equals(matchedID[9]) && userSpecies.equals(numOut)) {
                        matchedID[0] = matchedID[0].replace(userSpecies, "");
                        userList.addElement(matchedID[0]);
                        i++;
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Maximum client entry limit reached! Stopping at 200th record.", "Client list maxed out!", JOptionPane.ERROR_MESSAGE);
                    break;
                }
            }
            // OptionPane.showMessageDialog(null, i);
            intUser.close();
            // Check if there are no clients at all for each type
            if (userList.getSize() == 1) {
                userList.removeAllElements();
                userList.addElement("No client(s) available.");
            }
            // Attempt to list all fetched client ID into the list box
            cmbUserID.setModel(userList);
            // Select index 0 as default
            cmbUserID.setSelectedIndex(0);
        } catch (FileNotFoundException ex) {
            //Logger.getLogger(DZBorrowing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadUserInfo() {
        // Assigning the cID to the selected index value
        uID = (String) cmbUserID.getSelectedItem();
        // This is to ensure the entire method have access to borrow matchedID array
        String[] matchedID = null;
        FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
        // For debugging purpose only
        // JOptionPane.showMessageDialog(null, bID);
        File usertxt = new File(FileDir + "UserProfile.txt");
        Scanner intUser;
        try {
            // This part loads all book information
            intUser = new Scanner(usertxt);
            // Read lines from the file until no more are left.
            while (intUser.hasNext()) {
                // Read the next line.
                String bEntry = intUser.nextLine();
                // Split the line by using the delimiter ":" (semicolon) and store into array.
                matchedID = bEntry.split(":");
                matchedID[0] = matchedID[0].replace(userSpecies, "");
                // JOptionPane.showMessageDialog(null, i);
                if (cmbUserID.getSelectedItem().equals(matchedID[0])) {
                    txtManagerID.setText(matchedID[1]);
                    switch (matchedID[2]) {
                        case "Centre Manager":
                            cmbGender.setSelectedIndex(1);
                            break;
                        case "Technician":
                            cmbGender.setSelectedIndex(2);
                            break;
                        default:
                            cmbGender.setSelectedIndex(1);
                    }
                    txtFullName.setText(matchedID[3]);
                    txtEmail.setText(matchedID[4]);
                    txtUsername.setText(matchedID[5]);
                    txtPassword.setText(matchedID[6]);
                    txtPhoneNumber.setText(matchedID[7]);
                    switch (matchedID[8]) {
                        case "Male":
                            cmbGender.setSelectedIndex(1);
                            break;
                        case "Female":
                            cmbGender.setSelectedIndex(2);
                            break;
                        default:
                            cmbGender.setSelectedIndex(1);
                    }
                }
            }
            intUser.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(APUMUserProfile.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    //legacy code PLS DONT USE THIS ANYMORE
//    private void userIncrementor() {
//        // This is to ensure the entire method have access to the matchedID array
//        String[] matchedID = null;
//        // This flag is to check if the while loop is triggered or not. Triggered while loop indicates presence of records but relevance might not
//        boolean hasRecord = false;
//        try {
//            FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
//            // For debugging purpose only
//            // JOptionPane.showMessageDialog(null, bID);
//            File usertxt = new File(FileDir + "UserProfile.txt");
//            Scanner inputFile;
//            String temptype = null;
//
//            try {
//                inputFile = new Scanner(usertxt);
//                // Read lines from the file until no more are left.
//                while (inputFile.hasNext()) {
//                    // Read the next line.
//                    String bEntry = inputFile.nextLine();
//                    // Split the line by using the delimiter ":" (semicolon) and store into array.
//                    matchedID = bEntry.split(":");
//                    if (matchedID[0].contains("CM")) {
//                        temptype = "CM";
//                    } else if (matchedID[0].contains("TC")) {
//                        temptype = "TC";
//                    }
//                    matchedID[0] = matchedID[0].replace(temptype, "");
//                    hasRecord = true;
//                }
//                inputFile.close();
//                if (!hasRecord) {
//                    JOptionPane.showMessageDialog(null, "No client(s) record of any type was found! Restarting database entry.", "Client database is empty!", JOptionPane.ERROR_MESSAGE);
//                    newUserID = 1;
//                } else {
//                    newUserID = Integer.parseInt(matchedID[0]) + 1;
//                    System.out.println("Check new id:" + newUserID);
//                }
//                // JOptionPane.showMessageDialog(null, newClientID);
//            } catch (FileNotFoundException ex) {
//                // Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        } catch (Exception ex) {
//            JOptionPane.showMessageDialog(null, ex);
//            JOptionPane.showMessageDialog(null, "Invalid input! Book ID can only consist of numbers", "Invalid input type!", JOptionPane.ERROR_MESSAGE);
//        }
//    }

    private int userIDIncrementor(String selecteduserType) {
        // This is to ensure the entire method have access to the matchedID array
        String[] matchedID = null;
        // This flag is to check if the while loop is triggered or not. Triggered while loop indicates presence of records but relevance might not
        boolean hasRecord = false;
        int userCount[] = {0, 0};
        try {
            FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
            File usertxt = new File(FileDir + "UserProfile.txt");
            Scanner inputFile;
            String temptype = null;

            try {
                inputFile = new Scanner(usertxt);
                // Read lines from the file until no more are left.
                while (inputFile.hasNext()) {
                    // Read the next line.
                    String bEntry = inputFile.nextLine();
                    // Split the line by using the delimiter ":" (semicolon) and store into array.
                    matchedID = bEntry.split(":");
                    if (matchedID[0].contains("CM")) {
                        temptype = "CM";
                        userCount[0]++;
                    } else if (matchedID[0].contains("TC")) {
                        temptype = "TC";
                        userCount[1]++;
                    }
                    matchedID[0] = matchedID[0].replace(temptype, "");
                    hasRecord = true;
                }
                inputFile.close();
                if (!hasRecord) {
                    JOptionPane.showMessageDialog(null, "No user(s) record of any type was found! Restarting database entry.", "User database is empty!", JOptionPane.ERROR_MESSAGE);
                    newUserID = 1;
                } else {
                    newUserID = Integer.parseInt(matchedID[0]) + 1;
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(APUMUserProfile.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
            JOptionPane.showMessageDialog(null, "Invalid input! Book ID can only consist of numbers", "Invalid input type!", JOptionPane.ERROR_MESSAGE);
        }

        if (selecteduserType.equals("CM")) {
            return userCount[0] + 1;
        } else {
            return userCount[1] + 1;
        }
    }

    //register user data into textfields
    private void registerUserInfo() {
        // Declaring file extension used
        FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
        // Formatting ID into formal 6-digit mask
        DecimalFormat dc = new DecimalFormat("00000");
        try {
            // Fetching IDs from the textfields
            uID = dc.format(userIDIncrementor(userSpecies));
            // Check if textfields are empty
            emptyFields();
            if (emailChecker()) {
                throw new Exception("There is account with this email. Email cannot be used");
            }
            if (usernameChecker()) {
                throw new Exception("Username is taken. Username Duplicated!");
            }
            // Checking if gender is unselected
            if (cmbGender.getSelectedIndex() <= 0) {
                JOptionPane.showMessageDialog(null, "Gender is unset! Autosetting value to male", "Gender unselected!", JOptionPane.ERROR_MESSAGE);
                cmbGender.setSelectedIndex(1); // Setting the gender to male which is index 1
            }
            String userFullName = txtFullName.getText();
            String userEmail = txtEmail.getText();
            String userUsername = txtUsername.getText();
            String userPassword = String.valueOf(txtPassword.getPassword());
            String userPhoneNumber = txtPhoneNumber.getText();
            String userGender = (String) cmbGender.getSelectedItem();
            String userRole = (String) cmbUserType.getSelectedItem();
            // FileWriter and PrintWriter to create and write into UserProfile.txt
            try {
                // FileWriter to write into a new file called UserProfile.txt
                FileWriter cd = new FileWriter(FileDir + "UserProfile.txt", true);
                // PrintWriter to print into UserProfile.txt
                PrintWriter cdp = new PrintWriter(cd);
                // To print the line into UserProfile textfile
                cdp.println(userSpecies + uID + ":"
                        + managerID + ":"
                        + userRole + ":"
                        + userFullName + ":"
                        + userEmail + ":"
                        + userUsername + ":"
                        + userPassword + ":"
                        + userPhoneNumber + ":"
                        + userGender + ":"
                        + "true"); // true to indicate user is available and not deleted
                cdp.close();
                // To display completed registration process status
                JOptionPane.showMessageDialog(null, userSpecies + uID + " is successfully added! Press OK to return to user management form.", "Adding user succeeded!", JOptionPane.INFORMATION_MESSAGE);
                // To refresh new ID 
                userIDIncrementor(userSpecies);
                // To reload the client information
                // Integrate the reload part with combo box implementation of User ID
                setUserOption();
                // Refresh the currently displayed user with the latest ID
                cmbUserID.setSelectedIndex(cmbUserID.getItemCount() - 1);
            } catch (IOException ex) {
                // Logger.getLogger(unnamedBorrowMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception ex) {
            highlightEmpty();
            if (emailChecker()) {
                JOptionPane.showMessageDialog(null, "There is account with this email. Email cannot be used", "Duplicated Email", JOptionPane.WARNING_MESSAGE);
            }
            if (usernameChecker()) {
                JOptionPane.showMessageDialog(null, "Username is taken! Use a different username to proceed.", "Username is in use!", JOptionPane.WARNING_MESSAGE);
            }
            JOptionPane.showMessageDialog(null, "Invalid input! Please check your input to proceed.", "Invalid insertion detected!", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void updateUserInfo() {
        // TODO add your handling code here:
        try {
            // Check if textfields are empty
            emptyFields();
            if (emailChecker()) {
                throw new Exception("There is account with this email. Email cannot be used");
            }
            if (usernameChecker()) {
                throw new Exception("Username is taken. Username Duplicated!");
            }
            // To get directory  
            FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
            // To get the book ID
            uID = (String) cmbUserID.getSelectedItem();
            // To rename original book.txt to book.bak
            File userOri = new File(FileDir + "UserProfile.txt");
            File userBack = new File(FileDir + "UserProfileBack.txt");
            // To check if clientBak.txt is present or not
            if (!userBack.exists()) {
                userOri.createNewFile();
            }
            // This is for debugging only!
            // JOptionPane.showMessageDialog(null, "renamed");
            // This is to rename the existing book.txt to clientBak.txt
            userOri.renameTo(userBack);
            // This is to open, find and replace a specific book record
            // Requires temporary file to store current state
            // FileWriter to write into a new file called book.txt
            FileWriter cd = new FileWriter(FileDir + "UserProfile.txt");
            // PrintWriter to print into book.txt
            PrintWriter cdp = new PrintWriter(cd);
            // This is to open and read clientBak.txt 
            File usertxt = new File(FileDir + "UserProfileBack.txt");
            // This is to instantiate the file opened earlier
            Scanner inputFile = new Scanner(usertxt);
            // This array is to contain all lines
            String[] matchedID;
            // This is only for debugging!
            // boolean itWorked = false;
            // Read lines from the file until no more are left.
            while (inputFile.hasNext()) {
                // This is for debugging only!
                // JOptionPane.showMessageDialog(null, "In loop");
                // Read the next line.
                String bEntry = inputFile.nextLine();
                // Split the line by using the delimiter ":" (semicolon) and store into array.
                matchedID = bEntry.split(":");
                // Check if the read line has current book ID
                if (matchedID[0].equals(userSpecies + uID)) {
                    // Inserting the new information from the text fields into the book line
                    matchedID[1] = txtManagerID.getText();
                    matchedID[2] = (String) cmbUserType.getSelectedItem();
                    matchedID[3] = txtFullName.getText();
                    matchedID[4] = txtEmail.getText();
                    matchedID[5] = txtUsername.getText();
                    matchedID[6] = String.valueOf(txtPassword.getPassword());
                    matchedID[7] = txtPhoneNumber.getText();
                    matchedID[8] = (String) cmbGender.getSelectedItem();
                    matchedID[9] = "true";
                    // JOptionPane.showMessageDialog(null, "Yes it worked");
                }
                // Rewrite the new book.txt with values found in clientBak.txt
                cdp.println(matchedID[0] + ":"
                        + matchedID[1] + ":"
                        + matchedID[2] + ":"
                        + matchedID[3] + ":"
                        + matchedID[4] + ":"
                        + matchedID[5] + ":"
                        + matchedID[6] + ":"
                        + matchedID[7] + ":"
                        + matchedID[8] + ":"
                        + matchedID[9]);

            }
            // Close the clientBak.txt reader
            inputFile.close();
            // This deletes clientBak.txt
            userBack.delete();
            // This closes the book.txt printer 
            cdp.close();
            JOptionPane.showMessageDialog(null, "Client record has been updated!", "Client updated!", JOptionPane.INFORMATION_MESSAGE);
            loadUserInfo();
        } catch (Exception ex) {
            highlightEmpty();
            if (emailChecker()) {
                JOptionPane.showMessageDialog(null, "There is account with this email. Email cannot be used", "Duplicated Email", JOptionPane.WARNING_MESSAGE);
            }
            if (usernameChecker()) {
                JOptionPane.showMessageDialog(null, "Username is taken! Use a different username to proceed.", "Username is in use!", JOptionPane.WARNING_MESSAGE);
            }
            JOptionPane.showMessageDialog(null, "Invalid input! Please check your input to proceed.", "Invalid insertion detected!", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void deleteUserInfo() {
        // TODO add your handling code here:
        try {
            // To rename original book.txt to book.bak
            File userOri = new File(FileDir + "UserProfile.txt");
            File userBack = new File(FileDir + "UserProfileBack.txt");
            // To check if clientBak.txt is present or not
            if (!userBack.exists()) {
                userOri.createNewFile();
            }
            // This is for debugging only!
            // JOptionPane.showMessageDialog(null, "renamed");
            // This is to rename the existing book.txt to clientBak.txt
            userOri.renameTo(userBack);
            // This is to open, find and replace a specific book record
            // Requires temporary file to store current state
            // FileWriter to write into a new file called book.txt
            FileWriter cd = new FileWriter(FileDir + "UserProfile.txt");
            // PrintWriter to print into book.txt
            PrintWriter cdp = new PrintWriter(cd);
            // This is to open and read clientBak.txt 
            File usertxt = new File(FileDir + "UserProfileBack.txt");
            // This is to instantiate the file opened earlier
            Scanner inputFile = new Scanner(usertxt);
            // This array is to contain all lines
            String[] matchedID;
            // This is only for debugging!
            // boolean itWorked = false;
            // Read lines from the file until no more are left.
            while (inputFile.hasNext()) {
                // This is for debugging only!
                // JOptionPane.showMessageDialog(null, "In loop");
                // Read the next line.
                String cEntry = inputFile.nextLine();
                // Split the line by using the delimiter ":" (semicolon) and store into array.
                matchedID = cEntry.split(":");
                // Check if the read line has current book ID
                if (matchedID[0].equals(userSpecies + uID)) {
                    // Setting the deleted flag to true
                    matchedID[9] = "false";
                    // JOptionPane.showMessageDialog(null, "Yes it worked");
                }
                // Rewrite the new book.txt with values found in clientBak.txt
                cdp.println(matchedID[0] + ":"
                        + matchedID[1] + ":"
                        + matchedID[2] + ":"
                        + matchedID[3] + ":"
                        + matchedID[4] + ":"
                        + matchedID[5] + ":"
                        + matchedID[6] + ":"
                        + matchedID[7] + ":"
                        + matchedID[8] + ":"
                        + matchedID[9]);

            }
            // Close the clientBak.txt reader
            inputFile.close();
            // This deletes clientBak.txt
            userBack.delete();
            // This closes the book.txt printer 
            cdp.close();
            JOptionPane.showMessageDialog(null, userSpecies + uID + " record has been deleted!", "User deleted!", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);

        }
    }

    private void clearCache() {
        try {
            FileDir = System.getProperty("user.dir") + "\\src\\TextFiles\\";
            File cache = new File(FileDir + "UserCache.txt");
            if (cache.exists()) {
                cache.delete();
            }
        } catch (Exception ex) {

        }
    }

    private void initForm() {
        this.setLocationRelativeTo(null);
        setLogo();
        cmbUserID.setEnabled(false);
        btnRegister.setEnabled(true);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
        //userIncrementor();
        // This anon class handles window closing event
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                int selection = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Closing Window", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (selection == JOptionPane.YES_OPTION) {
                    clearCache();
                    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                } else {
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                }
            }
        });
        // This property disables newline creation in JTextField

        // Check if invalid input is inserted
        inputCharacterValidation();
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Validation Methods">
    private void emptyFields() throws Exception {
        EmailValidation vd = new EmailValidation();
        if ("".equals(txtFullName.getText())) {
            throw new Exception("Empty user full name");
        }
        if ("".equals(txtEmail.getText())) {
            throw new Exception("Empty user email address");
        }
        if ("".equals(txtUsername.getText())) {
            throw new Exception("Empty username");
        }
        if ("".equals(String.valueOf(txtPassword.getPassword()))) {
            throw new Exception("Empty user password");
        }
        if ("          ".equals(txtPhoneNumber.getText())) {
            throw new Exception("Empty phone number");
        }
        if (vd.runValidate(txtEmail, false)) {
            throw new Exception("Invalid email address format");
        }
    }

    private void clearUser() {
        // To clean up previous or default values from fields
        txtManagerID.setText("");
        txtFullName.setText("");
        txtEmail.setText("");
        txtUsername.setText("");
        txtPassword.setText("");
        txtPhoneNumber.setText("");
        cmbGender.setSelectedIndex(0);
        uID = "";
    }

    private void highlightEmpty() {
        if (cmbUserType.getSelectedIndex() <= 0) {
            lblUserType.setForeground(Color.RED);
        }
        if ("".equals(txtFullName.getText())) {
            lblFullName.setForeground(Color.RED);
        }
        if ("".equals(txtEmail.getText())) {
            lblEmail.setForeground(Color.RED);
        }
        if ("".equals(txtUsername.getText())) {
            lblUsername.setForeground(Color.RED);
        }
        if ("".equals(String.valueOf(txtPassword.getPassword()))) {
            lblPassword.setForeground(Color.RED);
        }
        if ("          ".equals(txtPhoneNumber.getText())) {
            lblPhoneNumber.setForeground(Color.RED);
        }
    }

    private void deHighlightEmpty() {
        lblUserType.setForeground(ogtxt);
        lblFullName.setForeground(ogtxt);
        lblEmail.setForeground(ogtxt);
        lblUsername.setForeground(ogtxt);
        lblPassword.setForeground(ogtxt);
        lblPhoneNumber.setForeground(ogtxt);
        // lblClientHomeAddress.setForeground(ogtxt);
    }

    private void inputCharacterValidation() {
        txtFullName.getDocument().addDocumentListener(new APUDocumentListener() {
            APUFullNameValidation vd = new APUFullNameValidation();

            @Override
            public void changedUpdate(DocumentEvent e) {
                vd.runValidate(txtFullName);
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                vd.runValidate(txtFullName);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                vd.runValidate(txtFullName);
            }
        });
        txtUsername.getDocument().addDocumentListener(new APUDocumentListener() {
            APUUsernameValidation vd = new APUUsernameValidation();

            @Override
            public void changedUpdate(DocumentEvent e) {
                vd.runValidate(txtUsername);
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                vd.runValidate(txtUsername);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                vd.runValidate(txtUsername);
            }
        });
        txtPassword.getDocument().addDocumentListener(new APUDocumentListener() {
            PasswordValidation  vd = new PasswordValidation ();
            @Override
            public void changedUpdate(DocumentEvent e) {
                vd.runValidate(txtPassword);
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                vd.runValidate(txtPassword);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                vd.runValidate(txtPassword);
            }
        });

    }
    // </editor-fold>

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        // TODO add your handling code here:
        deHighlightEmpty();
        registerUserInfo();
    }//GEN-LAST:event_btnRegisterActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        int selection = JOptionPane.showConfirmDialog(null, "Are you sure to go back?", "Back to Main Menu", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (selection == JOptionPane.YES_OPTION) {
            new APUCMMenu().setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        deHighlightEmpty();
        updateUserInfo();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selection = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete customer record?", "Deleting customer", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (selection == JOptionPane.YES_OPTION) {
            deleteUserInfo();
            clearUser();
            getUserType();
            setUserOption();
        } else {
            JOptionPane.showMessageDialog(null, "Customer record has not been deleted!", "Customer deletion", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtEmailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmailFocusLost
        // TODO add your handling code here:
        EmailValidation vd = new EmailValidation();
        vd.runValidate(txtEmail, true);
    }//GEN-LAST:event_txtEmailFocusLost

    private void cmbUserIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbUserIDActionPerformed

        deHighlightEmpty();
        // Loads index with Book ID only
        if (cmbUserID.getSelectedIndex() > 0) {
            loadUserInfo();
            btnRegister.setEnabled(false);
            btnDelete.setEnabled(true);
            btnUpdate.setEnabled(true);
        } else {
            // Disabling action buttons when no book is loaded. Add button is still available to accept new book
            clearUser();
            btnRegister.setEnabled(true);
            btnDelete.setEnabled(false);
            btnUpdate.setEnabled(false);
        }
    }//GEN-LAST:event_cmbUserIDActionPerformed

    private void cmbUserTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbUserTypeActionPerformed
        deHighlightEmpty();
        // Loads index with Client type only
        if (cmbUserType.getSelectedIndex() > 0) {
            getUserType();
            setUserOption();
            cmbUserID.setEnabled(true);
            btnRegister.setEnabled(true);
        } else {
            // Disabling action buttons when no client is loaded. Add button is still available to accept new book
            getUserType();
            setUserOption();
            clearUser();
            cmbUserID.setEnabled(false);
            btnRegister.setEnabled(false);
            btnUpdate.setEnabled(false);
            btnDelete.setEnabled(false);
        }
    }//GEN-LAST:event_cmbUserTypeActionPerformed

    // </editor-fold>  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (Exception ex) {
            System.err.println("Fail Look and Feel");
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new APUMUserProfile().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JPanel btnPnl;
    private javax.swing.JButton btnRegister;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbGender;
    private javax.swing.JComboBox<String> cmbUserID;
    private javax.swing.JComboBox<String> cmbUserType;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblApptID2;
    private javax.swing.JLabel lblDesc;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblFullName;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblManagerID;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPhoneNumber;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JLabel lblUserType;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtManagerID;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JFormattedTextField txtPhoneNumber;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
